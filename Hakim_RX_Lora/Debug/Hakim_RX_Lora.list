
Hakim_RX_Lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e0  080043e0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080043e0  080043e0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043e0  080043e0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e0  080043e0  000143e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080043e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000064  0800444c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  0800444c  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b07b  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cf3  00000000  00000000  0002b14b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002ce40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000829  00000000  00000000  0002d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017317  00000000  00000000  0002e0d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d852  00000000  00000000  000453e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084391  00000000  00000000  00052c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c78  00000000  00000000  000d6fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d9c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003538 	.word	0x08003538

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003538 	.word	0x08003538

0800014c <Lora_Init>:
char buffer_rx[100];
uint8_t rx;
volatile uint8_t   adc = 0;
bool flag= false;
uint8_t i= 0;
void Lora_Init(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000150:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000154:	f000 fe50 	bl	8000df8 <HAL_Delay>
	HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin,1);
 8000158:	2201      	movs	r2, #1
 800015a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015e:	4815      	ldr	r0, [pc, #84]	; (80001b4 <Lora_Init+0x68>)
 8000160:	f001 f9b2 	bl	80014c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin,1);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800016a:	4812      	ldr	r0, [pc, #72]	; (80001b4 <Lora_Init+0x68>)
 800016c:	f001 f9ac 	bl	80014c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000176:	480f      	ldr	r0, [pc, #60]	; (80001b4 <Lora_Init+0x68>)
 8000178:	f001 f9a6 	bl	80014c8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800017c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000180:	f000 fe3a 	bl	8000df8 <HAL_Delay>
	HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin,0);
 8000184:	2200      	movs	r2, #0
 8000186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018a:	480a      	ldr	r0, [pc, #40]	; (80001b4 <Lora_Init+0x68>)
 800018c:	f001 f99c 	bl	80014c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin,0);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000196:	4807      	ldr	r0, [pc, #28]	; (80001b4 <Lora_Init+0x68>)
 8000198:	f001 f996 	bl	80014c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <Lora_Init+0x68>)
 80001a4:	f001 f990 	bl	80014c8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80001a8:	20c8      	movs	r0, #200	; 0xc8
 80001aa:	f000 fe25 	bl	8000df8 <HAL_Delay>

}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001bc:	f000 fdba 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c0:	f000 f840 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c4:	f000 f906 	bl	80003d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c8:	f000 f882 	bl	80002d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80001cc:	f000 f8ae 	bl	800032c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80001d0:	f000 f8d6 	bl	8000380 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,&rx, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	4914      	ldr	r1, [pc, #80]	; (8000228 <main+0x70>)
 80001d8:	4814      	ldr	r0, [pc, #80]	; (800022c <main+0x74>)
 80001da:	f002 fbb7 	bl	800294c <HAL_UART_Receive_IT>
  SSD1306_Init();
 80001de:	f000 f993 	bl	8000508 <SSD1306_Init>
  Lora_Init();
 80001e2:	f7ff ffb3 	bl	800014c <Lora_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag) {
 80001e6:	4b12      	ldr	r3, [pc, #72]	; (8000230 <main+0x78>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0fb      	beq.n	80001e6 <main+0x2e>


		    SSD1306_GotoXY(0, 10);
 80001ee:	210a      	movs	r1, #10
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 faf1 	bl	80007d8 <SSD1306_GotoXY>
		    SSD1306_Puts("Lora : ",&Font_11x18,1);
 80001f6:	2201      	movs	r2, #1
 80001f8:	490e      	ldr	r1, [pc, #56]	; (8000234 <main+0x7c>)
 80001fa:	480f      	ldr	r0, [pc, #60]	; (8000238 <main+0x80>)
 80001fc:	f000 fb82 	bl	8000904 <SSD1306_Puts>
		    SSD1306_GotoXY(10,40);
 8000200:	2128      	movs	r1, #40	; 0x28
 8000202:	200a      	movs	r0, #10
 8000204:	f000 fae8 	bl	80007d8 <SSD1306_GotoXY>
		    SSD1306_Puts(buffer_rx,&Font_11x18,1);
 8000208:	2201      	movs	r2, #1
 800020a:	490a      	ldr	r1, [pc, #40]	; (8000234 <main+0x7c>)
 800020c:	480b      	ldr	r0, [pc, #44]	; (800023c <main+0x84>)
 800020e:	f000 fb79 	bl	8000904 <SSD1306_Puts>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000218:	4809      	ldr	r0, [pc, #36]	; (8000240 <main+0x88>)
 800021a:	f001 f955 	bl	80014c8 <HAL_GPIO_WritePin>
		  flag = false;
 800021e:	4b04      	ldr	r3, [pc, #16]	; (8000230 <main+0x78>)
 8000220:	2200      	movs	r2, #0
 8000222:	701a      	strb	r2, [r3, #0]
	  if (flag) {
 8000224:	e7df      	b.n	80001e6 <main+0x2e>
 8000226:	bf00      	nop
 8000228:	200001c8 	.word	0x200001c8
 800022c:	2000011c 	.word	0x2000011c
 8000230:	200001ca 	.word	0x200001ca
 8000234:	20000000 	.word	0x20000000
 8000238:	08003550 	.word	0x08003550
 800023c:	20000164 	.word	0x20000164
 8000240:	40010c00 	.word	0x40010c00

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	; 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	; 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f003 f93e 	bl	80034d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000266:	2301      	movs	r3, #1
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	2301      	movs	r3, #1
 8000276:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000278:	2302      	movs	r3, #2
 800027a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000282:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000286:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	f107 0318 	add.w	r3, r7, #24
 800028c:	4618      	mov	r0, r3
 800028e:	f001 fefd 	bl	800208c <HAL_RCC_OscConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000298:	f000 f930 	bl	80004fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029c:	230f      	movs	r3, #15
 800029e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a0:	2302      	movs	r3, #2
 80002a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 f96a 	bl	8002590 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002c2:	f000 f91b 	bl	80004fc <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3740      	adds	r7, #64	; 0x40
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_I2C1_Init+0x50>)
 80002d6:	4a13      	ldr	r2, [pc, #76]	; (8000324 <MX_I2C1_Init+0x54>)
 80002d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_I2C1_Init+0x50>)
 80002dc:	4a12      	ldr	r2, [pc, #72]	; (8000328 <MX_I2C1_Init+0x58>)
 80002de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_I2C1_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <MX_I2C1_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <MX_I2C1_Init+0x50>)
 80002ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <MX_I2C1_Init+0x50>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_I2C1_Init+0x50>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <MX_I2C1_Init+0x50>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <MX_I2C1_Init+0x50>)
 8000308:	2200      	movs	r2, #0
 800030a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <MX_I2C1_Init+0x50>)
 800030e:	f001 f8f3 	bl	80014f8 <HAL_I2C_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000318:	f000 f8f0 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000080 	.word	0x20000080
 8000324:	40005400 	.word	0x40005400
 8000328:	00061a80 	.word	0x00061a80

0800032c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000332:	4a12      	ldr	r2, [pc, #72]	; (800037c <MX_USART1_UART_Init+0x50>)
 8000334:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000336:	4b10      	ldr	r3, [pc, #64]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800033c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800034a:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000352:	220c      	movs	r2, #12
 8000354:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000356:	4b08      	ldr	r3, [pc, #32]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000362:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_USART1_UART_Init+0x4c>)
 8000364:	f002 faa2 	bl	80028ac <HAL_UART_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800036e:	f000 f8c5 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	200000d4 	.word	0x200000d4
 800037c:	40013800 	.word	0x40013800

08000380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 8000386:	4a12      	ldr	r2, [pc, #72]	; (80003d0 <MX_USART2_UART_Init+0x50>)
 8000388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 800038c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART2_UART_Init+0x4c>)
 80003b8:	f002 fa78 	bl	80028ac <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003c2:	f000 f89b 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000011c 	.word	0x2000011c
 80003d0:	40004400 	.word	0x40004400

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <MX_GPIO_Init+0x90>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_GPIO_Init+0x90>)
 80003ee:	f043 0320 	orr.w	r3, r3, #32
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0320 	and.w	r3, r3, #32
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a17      	ldr	r2, [pc, #92]	; (8000464 <MX_GPIO_Init+0x90>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a11      	ldr	r2, [pc, #68]	; (8000464 <MX_GPIO_Init+0x90>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_GPIO_Init+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0308 	and.w	r3, r3, #8
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_Pin|M0_Pin|LED_Pin, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000436:	480c      	ldr	r0, [pc, #48]	; (8000468 <MX_GPIO_Init+0x94>)
 8000438:	f001 f846 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_Pin M0_Pin LED_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin|LED_Pin;
 800043c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	2301      	movs	r3, #1
 8000444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2302      	movs	r3, #2
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4619      	mov	r1, r3
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_GPIO_Init+0x94>)
 8000456:	f000 feb3 	bl	80011c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000
 8000468:	40010c00 	.word	0x40010c00

0800046c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]


	switch (rx) {
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <HAL_UART_RxCpltCallback+0x74>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b2a      	cmp	r3, #42	; 0x2a
 800047a:	d11a      	bne.n	80004b2 <HAL_UART_RxCpltCallback+0x46>

		case '*':
			adc = atoi(buffer_rx);
 800047c:	4819      	ldr	r0, [pc, #100]	; (80004e4 <HAL_UART_RxCpltCallback+0x78>)
 800047e:	f002 ff9d 	bl	80033bc <atoi>
 8000482:	4603      	mov	r3, r0
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b18      	ldr	r3, [pc, #96]	; (80004e8 <HAL_UART_RxCpltCallback+0x7c>)
 8000488:	701a      	strb	r2, [r3, #0]
			memset(buffer_rx,0,i);
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <HAL_UART_RxCpltCallback+0x80>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	461a      	mov	r2, r3
 8000490:	2100      	movs	r1, #0
 8000492:	4814      	ldr	r0, [pc, #80]	; (80004e4 <HAL_UART_RxCpltCallback+0x78>)
 8000494:	f003 f81e 	bl	80034d4 <memset>
			i=0;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <HAL_UART_RxCpltCallback+0x80>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800049e:	2201      	movs	r2, #1
 80004a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004a4:	4812      	ldr	r0, [pc, #72]	; (80004f0 <HAL_UART_RxCpltCallback+0x84>)
 80004a6:	f001 f80f 	bl	80014c8 <HAL_GPIO_WritePin>
			flag = true;
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_UART_RxCpltCallback+0x88>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
			break;
 80004b0:	e00d      	b.n	80004ce <HAL_UART_RxCpltCallback+0x62>

		default:
			buffer_rx[i] =rx;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <HAL_UART_RxCpltCallback+0x80>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	461a      	mov	r2, r3
 80004b8:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <HAL_UART_RxCpltCallback+0x74>)
 80004ba:	7819      	ldrb	r1, [r3, #0]
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_UART_RxCpltCallback+0x78>)
 80004be:	5499      	strb	r1, [r3, r2]
				i++;
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_UART_RxCpltCallback+0x80>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_UART_RxCpltCallback+0x80>)
 80004ca:	701a      	strb	r2, [r3, #0]

			break;
 80004cc:	bf00      	nop
	}

	  HAL_UART_Receive_IT(&huart2,&rx, 1);
 80004ce:	2201      	movs	r2, #1
 80004d0:	4903      	ldr	r1, [pc, #12]	; (80004e0 <HAL_UART_RxCpltCallback+0x74>)
 80004d2:	4809      	ldr	r0, [pc, #36]	; (80004f8 <HAL_UART_RxCpltCallback+0x8c>)
 80004d4:	f002 fa3a 	bl	800294c <HAL_UART_Receive_IT>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200001c8 	.word	0x200001c8
 80004e4:	20000164 	.word	0x20000164
 80004e8:	200001c9 	.word	0x200001c9
 80004ec:	200001cb 	.word	0x200001cb
 80004f0:	40010c00 	.word	0x40010c00
 80004f4:	200001ca 	.word	0x200001ca
 80004f8:	2000011c 	.word	0x2000011c

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800050e:	f000 fa1f 	bl	8000950 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000512:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000516:	2201      	movs	r2, #1
 8000518:	2178      	movs	r1, #120	; 0x78
 800051a:	485b      	ldr	r0, [pc, #364]	; (8000688 <SSD1306_Init+0x180>)
 800051c:	f001 fa2e 	bl	800197c <HAL_I2C_IsDeviceReady>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000526:	2300      	movs	r3, #0
 8000528:	e0a9      	b.n	800067e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800052a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800052e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000530:	e002      	b.n	8000538 <SSD1306_Init+0x30>
		p--;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3b01      	subs	r3, #1
 8000536:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f9      	bne.n	8000532 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800053e:	22ae      	movs	r2, #174	; 0xae
 8000540:	2100      	movs	r1, #0
 8000542:	2078      	movs	r0, #120	; 0x78
 8000544:	f000 fa7e 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000548:	2220      	movs	r2, #32
 800054a:	2100      	movs	r1, #0
 800054c:	2078      	movs	r0, #120	; 0x78
 800054e:	f000 fa79 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000552:	2210      	movs	r2, #16
 8000554:	2100      	movs	r1, #0
 8000556:	2078      	movs	r0, #120	; 0x78
 8000558:	f000 fa74 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800055c:	22b0      	movs	r2, #176	; 0xb0
 800055e:	2100      	movs	r1, #0
 8000560:	2078      	movs	r0, #120	; 0x78
 8000562:	f000 fa6f 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000566:	22c8      	movs	r2, #200	; 0xc8
 8000568:	2100      	movs	r1, #0
 800056a:	2078      	movs	r0, #120	; 0x78
 800056c:	f000 fa6a 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	2078      	movs	r0, #120	; 0x78
 8000576:	f000 fa65 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800057a:	2210      	movs	r2, #16
 800057c:	2100      	movs	r1, #0
 800057e:	2078      	movs	r0, #120	; 0x78
 8000580:	f000 fa60 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000584:	2240      	movs	r2, #64	; 0x40
 8000586:	2100      	movs	r1, #0
 8000588:	2078      	movs	r0, #120	; 0x78
 800058a:	f000 fa5b 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800058e:	2281      	movs	r2, #129	; 0x81
 8000590:	2100      	movs	r1, #0
 8000592:	2078      	movs	r0, #120	; 0x78
 8000594:	f000 fa56 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000598:	22ff      	movs	r2, #255	; 0xff
 800059a:	2100      	movs	r1, #0
 800059c:	2078      	movs	r0, #120	; 0x78
 800059e:	f000 fa51 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80005a2:	22a1      	movs	r2, #161	; 0xa1
 80005a4:	2100      	movs	r1, #0
 80005a6:	2078      	movs	r0, #120	; 0x78
 80005a8:	f000 fa4c 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80005ac:	22a6      	movs	r2, #166	; 0xa6
 80005ae:	2100      	movs	r1, #0
 80005b0:	2078      	movs	r0, #120	; 0x78
 80005b2:	f000 fa47 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80005b6:	22a8      	movs	r2, #168	; 0xa8
 80005b8:	2100      	movs	r1, #0
 80005ba:	2078      	movs	r0, #120	; 0x78
 80005bc:	f000 fa42 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80005c0:	223f      	movs	r2, #63	; 0x3f
 80005c2:	2100      	movs	r1, #0
 80005c4:	2078      	movs	r0, #120	; 0x78
 80005c6:	f000 fa3d 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005ca:	22a4      	movs	r2, #164	; 0xa4
 80005cc:	2100      	movs	r1, #0
 80005ce:	2078      	movs	r0, #120	; 0x78
 80005d0:	f000 fa38 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80005d4:	22d3      	movs	r2, #211	; 0xd3
 80005d6:	2100      	movs	r1, #0
 80005d8:	2078      	movs	r0, #120	; 0x78
 80005da:	f000 fa33 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	; 0x78
 80005e4:	f000 fa2e 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80005e8:	22d5      	movs	r2, #213	; 0xd5
 80005ea:	2100      	movs	r1, #0
 80005ec:	2078      	movs	r0, #120	; 0x78
 80005ee:	f000 fa29 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80005f2:	22f0      	movs	r2, #240	; 0xf0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2078      	movs	r0, #120	; 0x78
 80005f8:	f000 fa24 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80005fc:	22d9      	movs	r2, #217	; 0xd9
 80005fe:	2100      	movs	r1, #0
 8000600:	2078      	movs	r0, #120	; 0x78
 8000602:	f000 fa1f 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000606:	2222      	movs	r2, #34	; 0x22
 8000608:	2100      	movs	r1, #0
 800060a:	2078      	movs	r0, #120	; 0x78
 800060c:	f000 fa1a 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000610:	22da      	movs	r2, #218	; 0xda
 8000612:	2100      	movs	r1, #0
 8000614:	2078      	movs	r0, #120	; 0x78
 8000616:	f000 fa15 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800061a:	2212      	movs	r2, #18
 800061c:	2100      	movs	r1, #0
 800061e:	2078      	movs	r0, #120	; 0x78
 8000620:	f000 fa10 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000624:	22db      	movs	r2, #219	; 0xdb
 8000626:	2100      	movs	r1, #0
 8000628:	2078      	movs	r0, #120	; 0x78
 800062a:	f000 fa0b 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800062e:	2220      	movs	r2, #32
 8000630:	2100      	movs	r1, #0
 8000632:	2078      	movs	r0, #120	; 0x78
 8000634:	f000 fa06 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000638:	228d      	movs	r2, #141	; 0x8d
 800063a:	2100      	movs	r1, #0
 800063c:	2078      	movs	r0, #120	; 0x78
 800063e:	f000 fa01 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000642:	2214      	movs	r2, #20
 8000644:	2100      	movs	r1, #0
 8000646:	2078      	movs	r0, #120	; 0x78
 8000648:	f000 f9fc 	bl	8000a44 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800064c:	22af      	movs	r2, #175	; 0xaf
 800064e:	2100      	movs	r1, #0
 8000650:	2078      	movs	r0, #120	; 0x78
 8000652:	f000 f9f7 	bl	8000a44 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000656:	222e      	movs	r2, #46	; 0x2e
 8000658:	2100      	movs	r1, #0
 800065a:	2078      	movs	r0, #120	; 0x78
 800065c:	f000 f9f2 	bl	8000a44 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000660:	2000      	movs	r0, #0
 8000662:	f000 f843 	bl	80006ec <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000666:	f000 f813 	bl	8000690 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <SSD1306_Init+0x184>)
 800066c:	2200      	movs	r2, #0
 800066e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <SSD1306_Init+0x184>)
 8000672:	2200      	movs	r2, #0
 8000674:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <SSD1306_Init+0x184>)
 8000678:	2201      	movs	r2, #1
 800067a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800067c:	2301      	movs	r3, #1
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000080 	.word	0x20000080
 800068c:	200005cc 	.word	0x200005cc

08000690 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000696:	2300      	movs	r3, #0
 8000698:	71fb      	strb	r3, [r7, #7]
 800069a:	e01d      	b.n	80006d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3b50      	subs	r3, #80	; 0x50
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	2078      	movs	r0, #120	; 0x78
 80006a8:	f000 f9cc 	bl	8000a44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	2078      	movs	r0, #120	; 0x78
 80006b2:	f000 f9c7 	bl	8000a44 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80006b6:	2210      	movs	r2, #16
 80006b8:	2100      	movs	r1, #0
 80006ba:	2078      	movs	r0, #120	; 0x78
 80006bc:	f000 f9c2 	bl	8000a44 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	01db      	lsls	r3, r3, #7
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <SSD1306_UpdateScreen+0x58>)
 80006c6:	441a      	add	r2, r3
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	2078      	movs	r0, #120	; 0x78
 80006ce:	f000 f953 	bl	8000978 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	3301      	adds	r3, #1
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b07      	cmp	r3, #7
 80006dc:	d9de      	bls.n	800069c <SSD1306_UpdateScreen+0xc>
	}
}
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200001cc 	.word	0x200001cc

080006ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d101      	bne.n	8000700 <SSD1306_Fill+0x14>
 80006fc:	2300      	movs	r3, #0
 80006fe:	e000      	b.n	8000702 <SSD1306_Fill+0x16>
 8000700:	23ff      	movs	r3, #255	; 0xff
 8000702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000706:	4619      	mov	r1, r3
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <SSD1306_Fill+0x2c>)
 800070a:	f002 fee3 	bl	80034d4 <memset>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200001cc 	.word	0x200001cc

0800071c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
 8000726:	460b      	mov	r3, r1
 8000728:	80bb      	strh	r3, [r7, #4]
 800072a:	4613      	mov	r3, r2
 800072c:	70fb      	strb	r3, [r7, #3]
	if (
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	2b7f      	cmp	r3, #127	; 0x7f
 8000732:	d848      	bhi.n	80007c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000734:	88bb      	ldrh	r3, [r7, #4]
 8000736:	2b3f      	cmp	r3, #63	; 0x3f
 8000738:	d845      	bhi.n	80007c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <SSD1306_DrawPixel+0xb4>)
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000742:	78fb      	ldrb	r3, [r7, #3]
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf0c      	ite	eq
 8000748:	2301      	moveq	r3, #1
 800074a:	2300      	movne	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d11a      	bne.n	800078c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000756:	88fa      	ldrh	r2, [r7, #6]
 8000758:	88bb      	ldrh	r3, [r7, #4]
 800075a:	08db      	lsrs	r3, r3, #3
 800075c:	b298      	uxth	r0, r3
 800075e:	4603      	mov	r3, r0
 8000760:	01db      	lsls	r3, r3, #7
 8000762:	4413      	add	r3, r2
 8000764:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <SSD1306_DrawPixel+0xb8>)
 8000766:	5cd3      	ldrb	r3, [r2, r3]
 8000768:	b25a      	sxtb	r2, r3
 800076a:	88bb      	ldrh	r3, [r7, #4]
 800076c:	f003 0307 	and.w	r3, r3, #7
 8000770:	2101      	movs	r1, #1
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	b25b      	sxtb	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b259      	sxtb	r1, r3
 800077c:	88fa      	ldrh	r2, [r7, #6]
 800077e:	4603      	mov	r3, r0
 8000780:	01db      	lsls	r3, r3, #7
 8000782:	4413      	add	r3, r2
 8000784:	b2c9      	uxtb	r1, r1
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <SSD1306_DrawPixel+0xb8>)
 8000788:	54d1      	strb	r1, [r2, r3]
 800078a:	e01d      	b.n	80007c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800078c:	88fa      	ldrh	r2, [r7, #6]
 800078e:	88bb      	ldrh	r3, [r7, #4]
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	b298      	uxth	r0, r3
 8000794:	4603      	mov	r3, r0
 8000796:	01db      	lsls	r3, r3, #7
 8000798:	4413      	add	r3, r2
 800079a:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <SSD1306_DrawPixel+0xb8>)
 800079c:	5cd3      	ldrb	r3, [r2, r3]
 800079e:	b25a      	sxtb	r2, r3
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f303 	lsl.w	r3, r1, r3
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	43db      	mvns	r3, r3
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	4013      	ands	r3, r2
 80007b4:	b259      	sxtb	r1, r3
 80007b6:	88fa      	ldrh	r2, [r7, #6]
 80007b8:	4603      	mov	r3, r0
 80007ba:	01db      	lsls	r3, r3, #7
 80007bc:	4413      	add	r3, r2
 80007be:	b2c9      	uxtb	r1, r1
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <SSD1306_DrawPixel+0xb8>)
 80007c2:	54d1      	strb	r1, [r2, r3]
 80007c4:	e000      	b.n	80007c8 <SSD1306_DrawPixel+0xac>
		return;
 80007c6:	bf00      	nop
	}
}
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	200005cc 	.word	0x200005cc
 80007d4:	200001cc 	.word	0x200001cc

080007d8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	80fb      	strh	r3, [r7, #6]
 80007e4:	4613      	mov	r3, r2
 80007e6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80007e8:	4a05      	ldr	r2, [pc, #20]	; (8000800 <SSD1306_GotoXY+0x28>)
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80007ee:	4a04      	ldr	r2, [pc, #16]	; (8000800 <SSD1306_GotoXY+0x28>)
 80007f0:	88bb      	ldrh	r3, [r7, #4]
 80007f2:	8053      	strh	r3, [r2, #2]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200005cc 	.word	0x200005cc

08000804 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
 8000810:	4613      	mov	r3, r2
 8000812:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000814:	4b3a      	ldr	r3, [pc, #232]	; (8000900 <SSD1306_Putc+0xfc>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
	if (
 8000820:	2b7f      	cmp	r3, #127	; 0x7f
 8000822:	dc07      	bgt.n	8000834 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000824:	4b36      	ldr	r3, [pc, #216]	; (8000900 <SSD1306_Putc+0xfc>)
 8000826:	885b      	ldrh	r3, [r3, #2]
 8000828:	461a      	mov	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	785b      	ldrb	r3, [r3, #1]
 800082e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000830:	2b3f      	cmp	r3, #63	; 0x3f
 8000832:	dd01      	ble.n	8000838 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000834:	2300      	movs	r3, #0
 8000836:	e05e      	b.n	80008f6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	e04b      	b.n	80008d6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	3b20      	subs	r3, #32
 8000846:	6839      	ldr	r1, [r7, #0]
 8000848:	7849      	ldrb	r1, [r1, #1]
 800084a:	fb01 f303 	mul.w	r3, r1, r3
 800084e:	4619      	mov	r1, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	440b      	add	r3, r1
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	e030      	b.n	80008c4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d010      	beq.n	8000894 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <SSD1306_Putc+0xfc>)
 8000874:	881a      	ldrh	r2, [r3, #0]
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	b29b      	uxth	r3, r3
 800087a:	4413      	add	r3, r2
 800087c:	b298      	uxth	r0, r3
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <SSD1306_Putc+0xfc>)
 8000880:	885a      	ldrh	r2, [r3, #2]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	b29b      	uxth	r3, r3
 8000886:	4413      	add	r3, r2
 8000888:	b29b      	uxth	r3, r3
 800088a:	79ba      	ldrb	r2, [r7, #6]
 800088c:	4619      	mov	r1, r3
 800088e:	f7ff ff45 	bl	800071c <SSD1306_DrawPixel>
 8000892:	e014      	b.n	80008be <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <SSD1306_Putc+0xfc>)
 8000896:	881a      	ldrh	r2, [r3, #0]
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4413      	add	r3, r2
 800089e:	b298      	uxth	r0, r3
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <SSD1306_Putc+0xfc>)
 80008a2:	885a      	ldrh	r2, [r3, #2]
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4413      	add	r3, r2
 80008aa:	b299      	uxth	r1, r3
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	bf0c      	ite	eq
 80008b2:	2301      	moveq	r3, #1
 80008b4:	2300      	movne	r3, #0
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	f7ff ff2f 	bl	800071c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	3301      	adds	r3, #1
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d3c8      	bcc.n	8000862 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3301      	adds	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	785b      	ldrb	r3, [r3, #1]
 80008da:	461a      	mov	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	4293      	cmp	r3, r2
 80008e0:	d3ad      	bcc.n	800083e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <SSD1306_Putc+0xfc>)
 80008e4:	881a      	ldrh	r2, [r3, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <SSD1306_Putc+0xfc>)
 80008f2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200005cc 	.word	0x200005cc

08000904 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	4613      	mov	r3, r2
 8000910:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000912:	e012      	b.n	800093a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	68b9      	ldr	r1, [r7, #8]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff71 	bl	8000804 <SSD1306_Putc>
 8000922:	4603      	mov	r3, r0
 8000924:	461a      	mov	r2, r3
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	d002      	beq.n	8000934 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	e008      	b.n	8000946 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1e8      	bne.n	8000914 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	781b      	ldrb	r3, [r3, #0]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <ssd1306_I2C_Init+0x24>)
 8000958:	607b      	str	r3, [r7, #4]
	while(p>0)
 800095a:	e002      	b.n	8000962 <ssd1306_I2C_Init+0x12>
		p--;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1f9      	bne.n	800095c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	0003d090 	.word	0x0003d090

08000978 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b0c7      	sub	sp, #284	; 0x11c
 800097c:	af02      	add	r7, sp, #8
 800097e:	4604      	mov	r4, r0
 8000980:	4608      	mov	r0, r1
 8000982:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000986:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800098a:	600a      	str	r2, [r1, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000992:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000996:	4622      	mov	r2, r4
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800099e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80009a2:	4602      	mov	r2, r0
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009ae:	460a      	mov	r2, r1
 80009b0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80009b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009be:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80009c2:	7812      	ldrb	r2, [r2, #0]
 80009c4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009cc:	e015      	b.n	80009fa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80009ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009d6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80009da:	6812      	ldr	r2, [r2, #0]
 80009dc:	441a      	add	r2, r3
 80009de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009e2:	3301      	adds	r3, #1
 80009e4:	7811      	ldrb	r1, [r2, #0]
 80009e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009ea:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80009ee:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80009f0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009f4:	3301      	adds	r3, #1
 80009f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a04:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000a08:	8812      	ldrh	r2, [r2, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d8df      	bhi.n	80009ce <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000a0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a12:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b299      	uxth	r1, r3
 8000a1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	f107 020c 	add.w	r2, r7, #12
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	9000      	str	r0, [sp, #0]
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <ssd1306_I2C_WriteMulti+0xc8>)
 8000a32:	f000 fea5 	bl	8001780 <HAL_I2C_Master_Transmit>
}
 8000a36:	bf00      	nop
 8000a38:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	20000080 	.word	0x20000080

08000a44 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af02      	add	r7, sp, #8
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	71bb      	strb	r3, [r7, #6]
 8000a52:	4613      	mov	r3, r2
 8000a54:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	b299      	uxth	r1, r3
 8000a62:	f107 020c 	add.w	r2, r7, #12
 8000a66:	230a      	movs	r3, #10
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	4803      	ldr	r0, [pc, #12]	; (8000a7c <ssd1306_I2C_Write+0x38>)
 8000a6e:	f000 fe87 	bl	8001780 <HAL_I2C_Master_Transmit>
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000080 	.word	0x20000080

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_MspInit+0x5c>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <HAL_MspInit+0x5c>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_MspInit+0x5c>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x5c>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_MspInit+0x5c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	61d3      	str	r3, [r2, #28]
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_MspInit+0x5c>)
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_MspInit+0x60>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_MspInit+0x60>)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010000 	.word	0x40010000

08000ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <HAL_I2C_MspInit+0x70>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d123      	bne.n	8000b4c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_I2C_MspInit+0x74>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <HAL_I2C_MspInit+0x74>)
 8000b0a:	f043 0308 	orr.w	r3, r3, #8
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_I2C_MspInit+0x74>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0308 	and.w	r3, r3, #8
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b1c:	23c0      	movs	r3, #192	; 0xc0
 8000b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b20:	2312      	movs	r3, #18
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <HAL_I2C_MspInit+0x78>)
 8000b30:	f000 fb46 	bl	80011c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_I2C_MspInit+0x74>)
 8000b36:	69db      	ldr	r3, [r3, #28]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_I2C_MspInit+0x74>)
 8000b3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3e:	61d3      	str	r3, [r2, #28]
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_I2C_MspInit+0x74>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40005400 	.word	0x40005400
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010c00 	.word	0x40010c00

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a3b      	ldr	r2, [pc, #236]	; (8000c68 <HAL_UART_MspInit+0x108>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d132      	bne.n	8000be6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a39      	ldr	r2, [pc, #228]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a33      	ldr	r2, [pc, #204]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	482a      	ldr	r0, [pc, #168]	; (8000c70 <HAL_UART_MspInit+0x110>)
 8000bc6:	f000 fafb 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4824      	ldr	r0, [pc, #144]	; (8000c70 <HAL_UART_MspInit+0x110>)
 8000be0:	f000 faee 	bl	80011c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000be4:	e03c      	b.n	8000c60 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <HAL_UART_MspInit+0x114>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d137      	bne.n	8000c60 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfa:	61d3      	str	r3, [r2, #28]
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0x10c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c20:	2304      	movs	r3, #4
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	4619      	mov	r1, r3
 8000c32:	480f      	ldr	r0, [pc, #60]	; (8000c70 <HAL_UART_MspInit+0x110>)
 8000c34:	f000 fac4 	bl	80011c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4809      	ldr	r0, [pc, #36]	; (8000c70 <HAL_UART_MspInit+0x110>)
 8000c4c:	f000 fab8 	bl	80011c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	2026      	movs	r0, #38	; 0x26
 8000c56:	f000 f9ca 	bl	8000fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c5a:	2026      	movs	r0, #38	; 0x26
 8000c5c:	f000 f9e3 	bl	8001026 <HAL_NVIC_EnableIRQ>
}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40013800 	.word	0x40013800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010800 	.word	0x40010800
 8000c74:	40004400 	.word	0x40004400

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr

08000cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbe:	f000 f87f 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <USART2_IRQHandler+0x10>)
 8000cce:	f001 fe63 	bl	8002998 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000011c 	.word	0x2000011c

08000cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce8:	f7ff fff8 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cee:	490c      	ldr	r1, [pc, #48]	; (8000d20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cf0:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d04:	4c09      	ldr	r4, [pc, #36]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f002 fbed 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d16:	f7ff fa4f 	bl	80001b8 <main>
  bx lr
 8000d1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d24:	080043e8 	.word	0x080043e8
  ldr r2, =_sbss
 8000d28:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d2c:	20000710 	.word	0x20000710

08000d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_2_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x28>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x28>)
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f947 	bl	8000fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fe96 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40022000 	.word	0x40022000

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f95f 	bl	8001042 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f927 	bl	8000fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000010 	.word	0x20000010
 8000dbc:	2000000c 	.word	0x2000000c

08000dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_IncTick+0x1c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x20>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_IncTick+0x20>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	20000010 	.word	0x20000010
 8000de0:	200005d4 	.word	0x200005d4

08000de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <HAL_GetTick+0x10>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	200005d4 	.word	0x200005d4

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e00:	f7ff fff0 	bl	8000de4 <HAL_GetTick>
 8000e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e10:	d005      	beq.n	8000e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_Delay+0x44>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e1e:	bf00      	nop
 8000e20:	f7ff ffe0 	bl	8000de4 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d8f7      	bhi.n	8000e20 <HAL_Delay+0x28>
  {
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000010 	.word	0x20000010

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4906      	ldr	r1, [pc, #24]	; (8000ed8 <__NVIC_EnableIRQ+0x34>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa4:	d301      	bcc.n	8000faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00f      	b.n	8000fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <SysTick_Config+0x40>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f7ff ff90 	bl	8000edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <SysTick_Config+0x40>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SysTick_Config+0x40>)
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	e000e010 	.word	0xe000e010

08000fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff2d 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001000:	f7ff ff42 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8001004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f7ff ff90 	bl	8000f30 <NVIC_EncodePriority>
 8001010:	4602      	mov	r2, r0
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff5f 	bl	8000edc <__NVIC_SetPriority>
}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	4603      	mov	r3, r0
 800102e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff35 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ffa2 	bl	8000f94 <SysTick_Config>
 8001050:	4603      	mov	r3, r0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800105a:	b480      	push	{r7}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d008      	beq.n	8001084 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2204      	movs	r2, #4
 8001076:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e020      	b.n	80010c6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 020e 	bic.w	r2, r2, #14
 8001092:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ac:	2101      	movs	r1, #1
 80010ae:	fa01 f202 	lsl.w	r2, r1, r2
 80010b2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d005      	beq.n	80010f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2204      	movs	r2, #4
 80010ec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	e051      	b.n	8001198 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 020e 	bic.w	r2, r2, #14
 8001102:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0201 	bic.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <HAL_DMA_Abort_IT+0xd4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d029      	beq.n	8001172 <HAL_DMA_Abort_IT+0xa2>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <HAL_DMA_Abort_IT+0xd8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d022      	beq.n	800116e <HAL_DMA_Abort_IT+0x9e>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_DMA_Abort_IT+0xdc>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01a      	beq.n	8001168 <HAL_DMA_Abort_IT+0x98>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <HAL_DMA_Abort_IT+0xe0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d012      	beq.n	8001162 <HAL_DMA_Abort_IT+0x92>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_DMA_Abort_IT+0xe4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00a      	beq.n	800115c <HAL_DMA_Abort_IT+0x8c>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_DMA_Abort_IT+0xe8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d102      	bne.n	8001156 <HAL_DMA_Abort_IT+0x86>
 8001150:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001154:	e00e      	b.n	8001174 <HAL_DMA_Abort_IT+0xa4>
 8001156:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800115a:	e00b      	b.n	8001174 <HAL_DMA_Abort_IT+0xa4>
 800115c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001160:	e008      	b.n	8001174 <HAL_DMA_Abort_IT+0xa4>
 8001162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001166:	e005      	b.n	8001174 <HAL_DMA_Abort_IT+0xa4>
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	e002      	b.n	8001174 <HAL_DMA_Abort_IT+0xa4>
 800116e:	2310      	movs	r3, #16
 8001170:	e000      	b.n	8001174 <HAL_DMA_Abort_IT+0xa4>
 8001172:	2301      	movs	r3, #1
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_DMA_Abort_IT+0xec>)
 8001176:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
    } 
  }
  return status;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40020008 	.word	0x40020008
 80011a8:	4002001c 	.word	0x4002001c
 80011ac:	40020030 	.word	0x40020030
 80011b0:	40020044 	.word	0x40020044
 80011b4:	40020058 	.word	0x40020058
 80011b8:	4002006c 	.word	0x4002006c
 80011bc:	40020000 	.word	0x40020000

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	e169      	b.n	80014a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d4:	2201      	movs	r2, #1
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8158 	bne.w	80014a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a9a      	ldr	r2, [pc, #616]	; (8001460 <HAL_GPIO_Init+0x2a0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d05e      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 80011fc:	4a98      	ldr	r2, [pc, #608]	; (8001460 <HAL_GPIO_Init+0x2a0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d875      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001202:	4a98      	ldr	r2, [pc, #608]	; (8001464 <HAL_GPIO_Init+0x2a4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d058      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001208:	4a96      	ldr	r2, [pc, #600]	; (8001464 <HAL_GPIO_Init+0x2a4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d86f      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800120e:	4a96      	ldr	r2, [pc, #600]	; (8001468 <HAL_GPIO_Init+0x2a8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d052      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001214:	4a94      	ldr	r2, [pc, #592]	; (8001468 <HAL_GPIO_Init+0x2a8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d869      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800121a:	4a94      	ldr	r2, [pc, #592]	; (800146c <HAL_GPIO_Init+0x2ac>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d04c      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001220:	4a92      	ldr	r2, [pc, #584]	; (800146c <HAL_GPIO_Init+0x2ac>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d863      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001226:	4a92      	ldr	r2, [pc, #584]	; (8001470 <HAL_GPIO_Init+0x2b0>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d046      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 800122c:	4a90      	ldr	r2, [pc, #576]	; (8001470 <HAL_GPIO_Init+0x2b0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d85d      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001232:	2b12      	cmp	r3, #18
 8001234:	d82a      	bhi.n	800128c <HAL_GPIO_Init+0xcc>
 8001236:	2b12      	cmp	r3, #18
 8001238:	d859      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <HAL_GPIO_Init+0x80>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	080012bb 	.word	0x080012bb
 8001244:	08001295 	.word	0x08001295
 8001248:	080012a7 	.word	0x080012a7
 800124c:	080012e9 	.word	0x080012e9
 8001250:	080012ef 	.word	0x080012ef
 8001254:	080012ef 	.word	0x080012ef
 8001258:	080012ef 	.word	0x080012ef
 800125c:	080012ef 	.word	0x080012ef
 8001260:	080012ef 	.word	0x080012ef
 8001264:	080012ef 	.word	0x080012ef
 8001268:	080012ef 	.word	0x080012ef
 800126c:	080012ef 	.word	0x080012ef
 8001270:	080012ef 	.word	0x080012ef
 8001274:	080012ef 	.word	0x080012ef
 8001278:	080012ef 	.word	0x080012ef
 800127c:	080012ef 	.word	0x080012ef
 8001280:	080012ef 	.word	0x080012ef
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012b1 	.word	0x080012b1
 800128c:	4a79      	ldr	r2, [pc, #484]	; (8001474 <HAL_GPIO_Init+0x2b4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001292:	e02c      	b.n	80012ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e029      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	3304      	adds	r3, #4
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e024      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	3308      	adds	r3, #8
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e01f      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	330c      	adds	r3, #12
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e01a      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012c2:	2304      	movs	r3, #4
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e013      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d0:	2308      	movs	r3, #8
 80012d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	611a      	str	r2, [r3, #16]
          break;
 80012da:	e009      	b.n	80012f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012dc:	2308      	movs	r3, #8
 80012de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	615a      	str	r2, [r3, #20]
          break;
 80012e6:	e003      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
          break;
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          break;
 80012ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2bff      	cmp	r3, #255	; 0xff
 80012f4:	d801      	bhi.n	80012fa <HAL_GPIO_Init+0x13a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	e001      	b.n	80012fe <HAL_GPIO_Init+0x13e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3304      	adds	r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2bff      	cmp	r3, #255	; 0xff
 8001304:	d802      	bhi.n	800130c <HAL_GPIO_Init+0x14c>
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x152>
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3b08      	subs	r3, #8
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	210f      	movs	r1, #15
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	6a39      	ldr	r1, [r7, #32]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	431a      	orrs	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80b1 	beq.w	80014a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001340:	4b4d      	ldr	r3, [pc, #308]	; (8001478 <HAL_GPIO_Init+0x2b8>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a4c      	ldr	r2, [pc, #304]	; (8001478 <HAL_GPIO_Init+0x2b8>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <HAL_GPIO_Init+0x2b8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001358:	4a48      	ldr	r2, [pc, #288]	; (800147c <HAL_GPIO_Init+0x2bc>)
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a40      	ldr	r2, [pc, #256]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d013      	beq.n	80013ac <HAL_GPIO_Init+0x1ec>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a3f      	ldr	r2, [pc, #252]	; (8001484 <HAL_GPIO_Init+0x2c4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d00d      	beq.n	80013a8 <HAL_GPIO_Init+0x1e8>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <HAL_GPIO_Init+0x2c8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d007      	beq.n	80013a4 <HAL_GPIO_Init+0x1e4>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a3d      	ldr	r2, [pc, #244]	; (800148c <HAL_GPIO_Init+0x2cc>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d101      	bne.n	80013a0 <HAL_GPIO_Init+0x1e0>
 800139c:	2303      	movs	r3, #3
 800139e:	e006      	b.n	80013ae <HAL_GPIO_Init+0x1ee>
 80013a0:	2304      	movs	r3, #4
 80013a2:	e004      	b.n	80013ae <HAL_GPIO_Init+0x1ee>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e002      	b.n	80013ae <HAL_GPIO_Init+0x1ee>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_GPIO_Init+0x1ee>
 80013ac:	2300      	movs	r3, #0
 80013ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b0:	f002 0203 	and.w	r2, r2, #3
 80013b4:	0092      	lsls	r2, r2, #2
 80013b6:	4093      	lsls	r3, r2
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013be:	492f      	ldr	r1, [pc, #188]	; (800147c <HAL_GPIO_Init+0x2bc>)
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3302      	adds	r3, #2
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	492c      	ldr	r1, [pc, #176]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4928      	ldr	r1, [pc, #160]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	4922      	ldr	r1, [pc, #136]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	491e      	ldr	r1, [pc, #120]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	4918      	ldr	r1, [pc, #96]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	4914      	ldr	r1, [pc, #80]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001440:	4013      	ands	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d021      	beq.n	8001494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	490e      	ldr	r1, [pc, #56]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
 800145c:	e021      	b.n	80014a2 <HAL_GPIO_Init+0x2e2>
 800145e:	bf00      	nop
 8001460:	10320000 	.word	0x10320000
 8001464:	10310000 	.word	0x10310000
 8001468:	10220000 	.word	0x10220000
 800146c:	10210000 	.word	0x10210000
 8001470:	10120000 	.word	0x10120000
 8001474:	10110000 	.word	0x10110000
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000
 8001480:	40010800 	.word	0x40010800
 8001484:	40010c00 	.word	0x40010c00
 8001488:	40011000 	.word	0x40011000
 800148c:	40011400 	.word	0x40011400
 8001490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_GPIO_Init+0x304>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	43db      	mvns	r3, r3
 800149c:	4909      	ldr	r1, [pc, #36]	; (80014c4 <HAL_GPIO_Init+0x304>)
 800149e:	4013      	ands	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	3301      	adds	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	fa22 f303 	lsr.w	r3, r2, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f47f ae8e 	bne.w	80011d4 <HAL_GPIO_Init+0x14>
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	372c      	adds	r7, #44	; 0x2c
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40010400 	.word	0x40010400

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	611a      	str	r2, [r3, #16]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e12b      	b.n	8001762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d106      	bne.n	8001524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fae0 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2224      	movs	r2, #36	; 0x24
 8001528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800154a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800155a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800155c:	f001 f960 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8001560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a81      	ldr	r2, [pc, #516]	; (800176c <HAL_I2C_Init+0x274>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d807      	bhi.n	800157c <HAL_I2C_Init+0x84>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4a80      	ldr	r2, [pc, #512]	; (8001770 <HAL_I2C_Init+0x278>)
 8001570:	4293      	cmp	r3, r2
 8001572:	bf94      	ite	ls
 8001574:	2301      	movls	r3, #1
 8001576:	2300      	movhi	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e006      	b.n	800158a <HAL_I2C_Init+0x92>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4a7d      	ldr	r2, [pc, #500]	; (8001774 <HAL_I2C_Init+0x27c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	bf94      	ite	ls
 8001584:	2301      	movls	r3, #1
 8001586:	2300      	movhi	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e0e7      	b.n	8001762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a78      	ldr	r2, [pc, #480]	; (8001778 <HAL_I2C_Init+0x280>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0c9b      	lsrs	r3, r3, #18
 800159c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	4a6a      	ldr	r2, [pc, #424]	; (800176c <HAL_I2C_Init+0x274>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d802      	bhi.n	80015cc <HAL_I2C_Init+0xd4>
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3301      	adds	r3, #1
 80015ca:	e009      	b.n	80015e0 <HAL_I2C_Init+0xe8>
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	4a69      	ldr	r2, [pc, #420]	; (800177c <HAL_I2C_Init+0x284>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	3301      	adds	r3, #1
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	495c      	ldr	r1, [pc, #368]	; (800176c <HAL_I2C_Init+0x274>)
 80015fc:	428b      	cmp	r3, r1
 80015fe:	d819      	bhi.n	8001634 <HAL_I2C_Init+0x13c>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1e59      	subs	r1, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fbb1 f3f3 	udiv	r3, r1, r3
 800160e:	1c59      	adds	r1, r3, #1
 8001610:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001614:	400b      	ands	r3, r1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00a      	beq.n	8001630 <HAL_I2C_Init+0x138>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1e59      	subs	r1, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fbb1 f3f3 	udiv	r3, r1, r3
 8001628:	3301      	adds	r3, #1
 800162a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162e:	e051      	b.n	80016d4 <HAL_I2C_Init+0x1dc>
 8001630:	2304      	movs	r3, #4
 8001632:	e04f      	b.n	80016d4 <HAL_I2C_Init+0x1dc>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d111      	bne.n	8001660 <HAL_I2C_Init+0x168>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1e58      	subs	r0, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	440b      	add	r3, r1
 800164a:	fbb0 f3f3 	udiv	r3, r0, r3
 800164e:	3301      	adds	r3, #1
 8001650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf0c      	ite	eq
 8001658:	2301      	moveq	r3, #1
 800165a:	2300      	movne	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	e012      	b.n	8001686 <HAL_I2C_Init+0x18e>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e58      	subs	r0, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	0099      	lsls	r1, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	fbb0 f3f3 	udiv	r3, r0, r3
 8001676:	3301      	adds	r3, #1
 8001678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf0c      	ite	eq
 8001680:	2301      	moveq	r3, #1
 8001682:	2300      	movne	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_Init+0x196>
 800168a:	2301      	movs	r3, #1
 800168c:	e022      	b.n	80016d4 <HAL_I2C_Init+0x1dc>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10e      	bne.n	80016b4 <HAL_I2C_Init+0x1bc>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1e58      	subs	r0, r3, #1
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6859      	ldr	r1, [r3, #4]
 800169e:	460b      	mov	r3, r1
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	440b      	add	r3, r1
 80016a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b2:	e00f      	b.n	80016d4 <HAL_I2C_Init+0x1dc>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1e58      	subs	r0, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6859      	ldr	r1, [r3, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	0099      	lsls	r1, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	6809      	ldr	r1, [r1, #0]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6911      	ldr	r1, [r2, #16]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68d2      	ldr	r2, [r2, #12]
 800170e:	4311      	orrs	r1, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	430b      	orrs	r3, r1
 8001716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2220      	movs	r2, #32
 800174e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	000186a0 	.word	0x000186a0
 8001770:	001e847f 	.word	0x001e847f
 8001774:	003d08ff 	.word	0x003d08ff
 8001778:	431bde83 	.word	0x431bde83
 800177c:	10624dd3 	.word	0x10624dd3

08001780 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af02      	add	r7, sp, #8
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	461a      	mov	r2, r3
 800178c:	460b      	mov	r3, r1
 800178e:	817b      	strh	r3, [r7, #10]
 8001790:	4613      	mov	r3, r2
 8001792:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff fb26 	bl	8000de4 <HAL_GetTick>
 8001798:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	f040 80e0 	bne.w	8001968 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2319      	movs	r3, #25
 80017ae:	2201      	movs	r2, #1
 80017b0:	4970      	ldr	r1, [pc, #448]	; (8001974 <HAL_I2C_Master_Transmit+0x1f4>)
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f000 fa92 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80017be:	2302      	movs	r3, #2
 80017c0:	e0d3      	b.n	800196a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_I2C_Master_Transmit+0x50>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0cc      	b.n	800196a <HAL_I2C_Master_Transmit+0x1ea>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d007      	beq.n	80017f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001804:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2221      	movs	r2, #33	; 0x21
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2210      	movs	r2, #16
 8001812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	893a      	ldrh	r2, [r7, #8]
 8001826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4a50      	ldr	r2, [pc, #320]	; (8001978 <HAL_I2C_Master_Transmit+0x1f8>)
 8001836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001838:	8979      	ldrh	r1, [r7, #10]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	6a3a      	ldr	r2, [r7, #32]
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f9ca 	bl	8001bd8 <I2C_MasterRequestWrite>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e08d      	b.n	800196a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001864:	e066      	b.n	8001934 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	6a39      	ldr	r1, [r7, #32]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 fb50 	bl	8001f10 <I2C_WaitOnTXEFlagUntilTimeout>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00d      	beq.n	8001892 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2b04      	cmp	r3, #4
 800187c:	d107      	bne.n	800188e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e06b      	b.n	800196a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d11b      	bne.n	8001908 <HAL_I2C_Master_Transmit+0x188>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d017      	beq.n	8001908 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001900:	3b01      	subs	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	6a39      	ldr	r1, [r7, #32]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 fb47 	bl	8001fa0 <I2C_WaitOnBTFFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00d      	beq.n	8001934 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	2b04      	cmp	r3, #4
 800191e:	d107      	bne.n	8001930 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e01a      	b.n	800196a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	d194      	bne.n	8001866 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	e000      	b.n	800196a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001968:	2302      	movs	r3, #2
  }
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	00100002 	.word	0x00100002
 8001978:	ffff0000 	.word	0xffff0000

0800197c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	460b      	mov	r3, r1
 800198a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff fa2a 	bl	8000de4 <HAL_GetTick>
 8001990:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b20      	cmp	r3, #32
 80019a0:	f040 8111 	bne.w	8001bc6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2319      	movs	r3, #25
 80019aa:	2201      	movs	r2, #1
 80019ac:	4988      	ldr	r1, [pc, #544]	; (8001bd0 <HAL_I2C_IsDeviceReady+0x254>)
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f994 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80019ba:	2302      	movs	r3, #2
 80019bc:	e104      	b.n	8001bc8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_I2C_IsDeviceReady+0x50>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e0fd      	b.n	8001bc8 <HAL_I2C_IsDeviceReady+0x24c>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d007      	beq.n	80019f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2224      	movs	r2, #36	; 0x24
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4a70      	ldr	r2, [pc, #448]	; (8001bd4 <HAL_I2C_IsDeviceReady+0x258>)
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f952 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00d      	beq.n	8001a5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a4c:	d103      	bne.n	8001a56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e0b6      	b.n	8001bc8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a5a:	897b      	ldrh	r3, [r7, #10]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff f9bb 	bl	8000de4 <HAL_GetTick>
 8001a6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	bf0c      	ite	eq
 8001a7e:	2301      	moveq	r3, #1
 8001a80:	2300      	movne	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a9e:	e025      	b.n	8001aec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aa0:	f7ff f9a0 	bl	8000de4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d302      	bcc.n	8001ab6 <HAL_I2C_IsDeviceReady+0x13a>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	22a0      	movs	r2, #160	; 0xa0
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2ba0      	cmp	r3, #160	; 0xa0
 8001af6:	d005      	beq.n	8001b04 <HAL_I2C_IsDeviceReady+0x188>
 8001af8:	7dfb      	ldrb	r3, [r7, #23]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <HAL_I2C_IsDeviceReady+0x188>
 8001afe:	7dbb      	ldrb	r3, [r7, #22]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0cd      	beq.n	8001aa0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d129      	bne.n	8001b6e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b28:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2319      	movs	r3, #25
 8001b46:	2201      	movs	r2, #1
 8001b48:	4921      	ldr	r1, [pc, #132]	; (8001bd0 <HAL_I2C_IsDeviceReady+0x254>)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f8c6 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e036      	b.n	8001bc8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e02c      	b.n	8001bc8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b86:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2319      	movs	r3, #25
 8001b8e:	2201      	movs	r2, #1
 8001b90:	490f      	ldr	r1, [pc, #60]	; (8001bd0 <HAL_I2C_IsDeviceReady+0x254>)
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f8a2 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e012      	b.n	8001bc8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f4ff af32 	bcc.w	8001a16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
  }
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	00100002 	.word	0x00100002
 8001bd4:	ffff0000 	.word	0xffff0000

08001bd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	460b      	mov	r3, r1
 8001be6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d006      	beq.n	8001c02 <I2C_MasterRequestWrite+0x2a>
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d003      	beq.n	8001c02 <I2C_MasterRequestWrite+0x2a>
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c00:	d108      	bne.n	8001c14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e00b      	b.n	8001c2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	2b12      	cmp	r3, #18
 8001c1a:	d107      	bne.n	8001c2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f84f 	bl	8001cdc <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00d      	beq.n	8001c60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c52:	d103      	bne.n	8001c5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e035      	b.n	8001ccc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c68:	d108      	bne.n	8001c7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	e01b      	b.n	8001cb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c7c:	897b      	ldrh	r3, [r7, #10]
 8001c7e:	11db      	asrs	r3, r3, #7
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f003 0306 	and.w	r3, r3, #6
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f063 030f 	orn	r3, r3, #15
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	490e      	ldr	r1, [pc, #56]	; (8001cd4 <I2C_MasterRequestWrite+0xfc>)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f898 	bl	8001dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e010      	b.n	8001ccc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001caa:	897b      	ldrh	r3, [r7, #10]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <I2C_MasterRequestWrite+0x100>)
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f888 	bl	8001dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	00010008 	.word	0x00010008
 8001cd8:	00010002 	.word	0x00010002

08001cdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cec:	e048      	b.n	8001d80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d044      	beq.n	8001d80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf6:	f7ff f875 	bl	8000de4 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d302      	bcc.n	8001d0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d139      	bne.n	8001d80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d10d      	bne.n	8001d32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	4013      	ands	r3, r2
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	e00c      	b.n	8001d4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d116      	bne.n	8001d80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e023      	b.n	8001dc8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	0c1b      	lsrs	r3, r3, #16
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d10d      	bne.n	8001da6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	43da      	mvns	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	4013      	ands	r3, r2
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	e00c      	b.n	8001dc0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	43da      	mvns	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4013      	ands	r3, r2
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d093      	beq.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dde:	e071      	b.n	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dee:	d123      	bne.n	8001e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f043 0204 	orr.w	r2, r3, #4
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e067      	b.n	8001f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3e:	d041      	beq.n	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e40:	f7fe ffd0 	bl	8000de4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d136      	bne.n	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10c      	bne.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf14      	ite	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	2300      	moveq	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	e00b      	b.n	8001e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	4013      	ands	r3, r2
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f043 0220 	orr.w	r2, r3, #32
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e021      	b.n	8001f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	0c1b      	lsrs	r3, r3, #16
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10c      	bne.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e00b      	b.n	8001f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	43da      	mvns	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f af6d 	bne.w	8001de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f1c:	e034      	b.n	8001f88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f886 	bl	8002030 <I2C_IsAcknowledgeFailed>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e034      	b.n	8001f98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f34:	d028      	beq.n	8001f88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f36:	f7fe ff55 	bl	8000de4 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d302      	bcc.n	8001f4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d11d      	bne.n	8001f88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	2b80      	cmp	r3, #128	; 0x80
 8001f58:	d016      	beq.n	8001f88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e007      	b.n	8001f98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d1c3      	bne.n	8001f1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fac:	e034      	b.n	8002018 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f83e 	bl	8002030 <I2C_IsAcknowledgeFailed>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e034      	b.n	8002028 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d028      	beq.n	8002018 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7fe ff0d 	bl	8000de4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d11d      	bne.n	8002018 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d016      	beq.n	8002018 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f043 0220 	orr.w	r2, r3, #32
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e007      	b.n	8002028 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b04      	cmp	r3, #4
 8002024:	d1c3      	bne.n	8001fae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002046:	d11b      	bne.n	8002080 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002050:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e272      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8087 	beq.w	80021ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ac:	4b92      	ldr	r3, [pc, #584]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d00c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020b8:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d112      	bne.n	80020ea <HAL_RCC_OscConfig+0x5e>
 80020c4:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d10b      	bne.n	80020ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d2:	4b89      	ldr	r3, [pc, #548]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d06c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x12c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d168      	bne.n	80021b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e24c      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x76>
 80020f4:	4b80      	ldr	r3, [pc, #512]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a7f      	ldr	r2, [pc, #508]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e02e      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x98>
 800210a:	4b7b      	ldr	r3, [pc, #492]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a7a      	ldr	r2, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b78      	ldr	r3, [pc, #480]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a77      	ldr	r2, [pc, #476]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e01d      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0xbc>
 800212e:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a71      	ldr	r2, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e00b      	b.n	8002160 <HAL_RCC_OscConfig+0xd4>
 8002148:	4b6b      	ldr	r3, [pc, #428]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a6a      	ldr	r2, [pc, #424]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe fe3c 	bl	8000de4 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7fe fe38 	bl	8000de4 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e200      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0xe4>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe fe28 	bl	8000de4 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7fe fe24 	bl	8000de4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e1ec      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x10c>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d063      	beq.n	800228e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c6:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021d2:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d11c      	bne.n	8002218 <HAL_RCC_OscConfig+0x18c>
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d116      	bne.n	8002218 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_RCC_OscConfig+0x176>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e1c0      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4939      	ldr	r1, [pc, #228]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002216:	e03a      	b.n	800228e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d020      	beq.n	8002262 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002220:	4b36      	ldr	r3, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x270>)
 8002222:	2201      	movs	r2, #1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7fe fddd 	bl	8000de4 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222e:	f7fe fdd9 	bl	8000de4 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e1a1      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4927      	ldr	r1, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <HAL_RCC_OscConfig+0x270>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fdbc 	bl	8000de4 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002270:	f7fe fdb8 	bl	8000de4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e180      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03a      	beq.n	8002310 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d019      	beq.n	80022d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7fe fd9c 	bl	8000de4 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7fe fd98 	bl	8000de4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e160      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f000 face 	bl	8002870 <RCC_Delay>
 80022d4:	e01c      	b.n	8002310 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_RCC_OscConfig+0x274>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7fe fd82 	bl	8000de4 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e2:	e00f      	b.n	8002304 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe fd7e 	bl	8000de4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d908      	bls.n	8002304 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e146      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000
 80022fc:	42420000 	.word	0x42420000
 8002300:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4b92      	ldr	r3, [pc, #584]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e9      	bne.n	80022e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a6 	beq.w	800246a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b8b      	ldr	r3, [pc, #556]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a87      	ldr	r2, [pc, #540]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b85      	ldr	r3, [pc, #532]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	4b82      	ldr	r3, [pc, #520]	; (8002554 <HAL_RCC_OscConfig+0x4c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002352:	2b00      	cmp	r3, #0
 8002354:	d118      	bne.n	8002388 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002356:	4b7f      	ldr	r3, [pc, #508]	; (8002554 <HAL_RCC_OscConfig+0x4c8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7e      	ldr	r2, [pc, #504]	; (8002554 <HAL_RCC_OscConfig+0x4c8>)
 800235c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe fd3f 	bl	8000de4 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236a:	f7fe fd3b 	bl	8000de4 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e103      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b75      	ldr	r3, [pc, #468]	; (8002554 <HAL_RCC_OscConfig+0x4c8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d106      	bne.n	800239e <HAL_RCC_OscConfig+0x312>
 8002390:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a6e      	ldr	r2, [pc, #440]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	e02d      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x334>
 80023a6:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a69      	ldr	r2, [pc, #420]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b67      	ldr	r3, [pc, #412]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a66      	ldr	r2, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	e01c      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d10c      	bne.n	80023e2 <HAL_RCC_OscConfig+0x356>
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a60      	ldr	r2, [pc, #384]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a5d      	ldr	r2, [pc, #372]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e00b      	b.n	80023fa <HAL_RCC_OscConfig+0x36e>
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	4a5a      	ldr	r2, [pc, #360]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6213      	str	r3, [r2, #32]
 80023ee:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d015      	beq.n	800242e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7fe fcef 	bl	8000de4 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fceb 	bl	8000de4 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0b1      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ee      	beq.n	800240a <HAL_RCC_OscConfig+0x37e>
 800242c:	e014      	b.n	8002458 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7fe fcd9 	bl	8000de4 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fcd5 	bl	8000de4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e09b      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	4b40      	ldr	r3, [pc, #256]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ee      	bne.n	8002436 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d105      	bne.n	800246a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245e:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8087 	beq.w	8002582 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002474:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b08      	cmp	r3, #8
 800247e:	d061      	beq.n	8002544 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d146      	bne.n	8002516 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_RCC_OscConfig+0x4cc>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fe fca9 	bl	8000de4 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7fe fca5 	bl	8000de4 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e06d      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a8:	4b29      	ldr	r3, [pc, #164]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024bc:	d108      	bne.n	80024d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	4921      	ldr	r1, [pc, #132]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a19      	ldr	r1, [r3, #32]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	430b      	orrs	r3, r1
 80024e2:	491b      	ldr	r1, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fc79 	bl	8000de4 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe fc75 	bl	8000de4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e03d      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x46a>
 8002514:	e035      	b.n	8002582 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCC_OscConfig+0x4cc>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fc62 	bl	8000de4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe fc5e 	bl	8000de4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e026      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x498>
 8002542:	e01e      	b.n	8002582 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e019      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
 8002558:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_OscConfig+0x500>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0d0      	b.n	8002746 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d910      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b67      	ldr	r3, [pc, #412]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 0207 	bic.w	r2, r3, #7
 80025ba:	4965      	ldr	r1, [pc, #404]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b63      	ldr	r3, [pc, #396]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0b8      	b.n	8002746 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d020      	beq.n	8002622 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ec:	4b59      	ldr	r3, [pc, #356]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4a58      	ldr	r2, [pc, #352]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002604:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4a52      	ldr	r2, [pc, #328]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800260e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002610:	4b50      	ldr	r3, [pc, #320]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	494d      	ldr	r1, [pc, #308]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d040      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d107      	bne.n	8002646 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d115      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e07f      	b.n	8002746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d107      	bne.n	800265e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	4b41      	ldr	r3, [pc, #260]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e073      	b.n	8002746 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265e:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e06b      	b.n	8002746 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266e:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f023 0203 	bic.w	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4936      	ldr	r1, [pc, #216]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002680:	f7fe fbb0 	bl	8000de4 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	e00a      	b.n	800269e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002688:	f7fe fbac 	bl	8000de4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e053      	b.n	8002746 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 020c 	and.w	r2, r3, #12
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1eb      	bne.n	8002688 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d210      	bcs.n	80026e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0207 	bic.w	r2, r3, #7
 80026c6:	4922      	ldr	r1, [pc, #136]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d001      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e032      	b.n	8002746 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4916      	ldr	r1, [pc, #88]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	490e      	ldr	r1, [pc, #56]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800271e:	f000 f821 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8002722:	4602      	mov	r2, r0
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	490a      	ldr	r1, [pc, #40]	; (8002758 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	5ccb      	ldrb	r3, [r1, r3]
 8002732:	fa22 f303 	lsr.w	r3, r2, r3
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <HAL_RCC_ClockConfig+0x1cc>)
 8002738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800273a:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1d0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fb0e 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40022000 	.word	0x40022000
 8002754:	40021000 	.word	0x40021000
 8002758:	080042b4 	.word	0x080042b4
 800275c:	20000008 	.word	0x20000008
 8002760:	2000000c 	.word	0x2000000c

08002764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800277e:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d002      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x30>
 800278e:	2b08      	cmp	r3, #8
 8002790:	d003      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0x36>
 8002792:	e027      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002794:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002796:	613b      	str	r3, [r7, #16]
      break;
 8002798:	e027      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	0c9b      	lsrs	r3, r3, #18
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d010      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	0c5b      	lsrs	r3, r3, #17
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027be:	5cd3      	ldrb	r3, [r2, r3]
 80027c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <HAL_RCC_GetSysClockFreq+0x98>)
 80027c6:	fb03 f202 	mul.w	r2, r3, r2
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e004      	b.n	80027de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	613b      	str	r3, [r7, #16]
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetSysClockFreq+0x98>)
 80027e6:	613b      	str	r3, [r7, #16]
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	693b      	ldr	r3, [r7, #16]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	007a1200 	.word	0x007a1200
 8002800:	080042cc 	.word	0x080042cc
 8002804:	080042dc 	.word	0x080042dc
 8002808:	003d0900 	.word	0x003d0900

0800280c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002810:	4b02      	ldr	r3, [pc, #8]	; (800281c <HAL_RCC_GetHCLKFreq+0x10>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	20000008 	.word	0x20000008

08002820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002824:	f7ff fff2 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	080042c4 	.word	0x080042c4

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800284c:	f7ff ffde 	bl	800280c <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0adb      	lsrs	r3, r3, #11
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <HAL_RCC_GetPCLK2Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000
 800286c:	080042c4 	.word	0x080042c4

08002870 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <RCC_Delay+0x34>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <RCC_Delay+0x38>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0a5b      	lsrs	r3, r3, #9
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	fb02 f303 	mul.w	r3, r2, r3
 800288a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800288c:	bf00      	nop
  }
  while (Delay --);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	60fa      	str	r2, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f9      	bne.n	800288c <RCC_Delay+0x1c>
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	20000008 	.word	0x20000008
 80028a8:	10624dd3 	.word	0x10624dd3

080028ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e042      	b.n	8002944 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7fe f944 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	; 0x24
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fcd5 	bl	80032a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695a      	ldr	r2, [r3, #20]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	4613      	mov	r3, r2
 8002958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b20      	cmp	r3, #32
 8002964:	d112      	bne.n	800298c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <HAL_UART_Receive_IT+0x26>
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00b      	b.n	800298e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	461a      	mov	r2, r3
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fab7 	bl	8002ef6 <UART_Start_Receive_IT>
 8002988:	4603      	mov	r3, r0
 800298a:	e000      	b.n	800298e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b0ba      	sub	sp, #232	; 0xe8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_UART_IRQHandler+0x66>
 80029ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fb93 	bl	8003122 <UART_Receive_IT>
      return;
 80029fc:	e25b      	b.n	8002eb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80de 	beq.w	8002bc4 <HAL_UART_IRQHandler+0x22c>
 8002a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d106      	bne.n	8002a22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80d1 	beq.w	8002bc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_UART_IRQHandler+0xae>
 8002a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d005      	beq.n	8002a46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4a:	f003 0304 	and.w	r3, r3, #4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_UART_IRQHandler+0xd2>
 8002a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f043 0202 	orr.w	r2, r3, #2
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_UART_IRQHandler+0xf6>
 8002a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f043 0204 	orr.w	r2, r3, #4
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d011      	beq.n	8002abe <HAL_UART_IRQHandler+0x126>
 8002a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f043 0208 	orr.w	r2, r3, #8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 81f2 	beq.w	8002eac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x14e>
 8002ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fb1e 	bl	8003122 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <HAL_UART_IRQHandler+0x17a>
 8002b0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d04f      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fa28 	bl	8002f68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d041      	beq.n	8002baa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3314      	adds	r3, #20
 8002b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b34:	e853 3f00 	ldrex	r3, [r3]
 8002b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3314      	adds	r3, #20
 8002b4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1d9      	bne.n	8002b26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d013      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	4a7e      	ldr	r2, [pc, #504]	; (8002d78 <HAL_UART_IRQHandler+0x3e0>)
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe faa2 	bl	80010d0 <HAL_DMA_Abort_IT>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d016      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba0:	e00e      	b.n	8002bc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f993 	bl	8002ece <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba8:	e00a      	b.n	8002bc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f98f 	bl	8002ece <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb0:	e006      	b.n	8002bc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f98b 	bl	8002ece <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002bbe:	e175      	b.n	8002eac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	bf00      	nop
    return;
 8002bc2:	e173      	b.n	8002eac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 814f 	bne.w	8002e6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8148 	beq.w	8002e6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8141 	beq.w	8002e6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80b6 	beq.w	8002d7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8145 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	f080 813e 	bcs.w	8002eb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	f000 8088 	beq.w	8002d58 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c56:	e853 3f00 	ldrex	r3, [r3]
 8002c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c74:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c84:	e841 2300 	strex	r3, r2, [r1]
 8002c88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1d9      	bne.n	8002c48 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3314      	adds	r3, #20
 8002c9a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3314      	adds	r3, #20
 8002cb4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cc4:	e841 2300 	strex	r3, r2, [r1]
 8002cc8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e1      	bne.n	8002c94 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3314      	adds	r3, #20
 8002cd6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cda:	e853 3f00 	ldrex	r3, [r3]
 8002cde:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3314      	adds	r3, #20
 8002cf0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cf4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cf6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e3      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	330c      	adds	r3, #12
 8002d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d28:	f023 0310 	bic.w	r3, r3, #16
 8002d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e3      	bne.n	8002d16 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe f981 	bl	800105a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8b6 	bl	8002ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d74:	e09c      	b.n	8002eb0 <HAL_UART_IRQHandler+0x518>
 8002d76:	bf00      	nop
 8002d78:	0800302d 	.word	0x0800302d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 808e 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8089 	beq.w	8002eb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8002dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e3      	bne.n	8002da2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3314      	adds	r3, #20
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	623b      	str	r3, [r7, #32]
   return(result);
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3314      	adds	r3, #20
 8002dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e3      	bne.n	8002dda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	e853 3f00 	ldrex	r3, [r3]
 8002e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0310 	bic.w	r3, r3, #16
 8002e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e44:	61fa      	str	r2, [r7, #28]
 8002e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	69b9      	ldr	r1, [r7, #24]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	e841 2300 	strex	r3, r2, [r1]
 8002e50:	617b      	str	r3, [r7, #20]
   return(result);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e3      	bne.n	8002e20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e62:	4619      	mov	r1, r3
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f83b 	bl	8002ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e6a:	e023      	b.n	8002eb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d009      	beq.n	8002e8c <HAL_UART_IRQHandler+0x4f4>
 8002e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f8e5 	bl	8003054 <UART_Transmit_IT>
    return;
 8002e8a:	e014      	b.n	8002eb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00e      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x51e>
 8002e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f924 	bl	80030f2 <UART_EndTransmit_IT>
    return;
 8002eaa:	e004      	b.n	8002eb6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002eac:	bf00      	nop
 8002eae:	e002      	b.n	8002eb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002eb0:	bf00      	nop
 8002eb2:	e000      	b.n	8002eb6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002eb4:	bf00      	nop
  }
}
 8002eb6:	37e8      	adds	r7, #232	; 0xe8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	4613      	mov	r3, r2
 8002f02:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2222      	movs	r2, #34	; 0x22
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0220 	orr.w	r2, r2, #32
 8002f5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b095      	sub	sp, #84	; 0x54
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	330c      	adds	r3, #12
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f90:	643a      	str	r2, [r7, #64]	; 0x40
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f98:	e841 2300 	strex	r3, r2, [r1]
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e5      	bne.n	8002f70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3314      	adds	r3, #20
 8002faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	e853 3f00 	ldrex	r3, [r3]
 8002fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3314      	adds	r3, #20
 8002fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fcc:	e841 2300 	strex	r3, r2, [r1]
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e5      	bne.n	8002fa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d119      	bne.n	8003014 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f023 0310 	bic.w	r3, r3, #16
 8002ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003000:	61ba      	str	r2, [r7, #24]
 8003002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	6979      	ldr	r1, [r7, #20]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	613b      	str	r3, [r7, #16]
   return(result);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e5      	bne.n	8002fe0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003022:	bf00      	nop
 8003024:	3754      	adds	r7, #84	; 0x54
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff ff41 	bl	8002ece <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b21      	cmp	r3, #33	; 0x21
 8003066:	d13e      	bne.n	80030e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003070:	d114      	bne.n	800309c <UART_Transmit_IT+0x48>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d110      	bne.n	800309c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	1c9a      	adds	r2, r3, #2
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	621a      	str	r2, [r3, #32]
 800309a:	e008      	b.n	80030ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	1c59      	adds	r1, r3, #1
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6211      	str	r1, [r2, #32]
 80030a6:	781a      	ldrb	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4619      	mov	r1, r3
 80030bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
  }
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003108:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff fed2 	bl	8002ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b08c      	sub	sp, #48	; 0x30
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b22      	cmp	r3, #34	; 0x22
 8003134:	f040 80ae 	bne.w	8003294 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003140:	d117      	bne.n	8003172 <UART_Receive_IT+0x50>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d113      	bne.n	8003172 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800314a:	2300      	movs	r3, #0
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	b29b      	uxth	r3, r3
 800315c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003160:	b29a      	uxth	r2, r3
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	1c9a      	adds	r2, r3, #2
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
 8003170:	e026      	b.n	80031c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003178:	2300      	movs	r3, #0
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003184:	d007      	beq.n	8003196 <UART_Receive_IT+0x74>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10a      	bne.n	80031a4 <UART_Receive_IT+0x82>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	e008      	b.n	80031b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4619      	mov	r1, r3
 80031ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d15d      	bne.n	8003290 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0220 	bic.w	r2, r2, #32
 80031e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	2b01      	cmp	r3, #1
 8003218:	d135      	bne.n	8003286 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	330c      	adds	r3, #12
 8003226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	e853 3f00 	ldrex	r3, [r3]
 800322e:	613b      	str	r3, [r7, #16]
   return(result);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f023 0310 	bic.w	r3, r3, #16
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	330c      	adds	r3, #12
 800323e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003240:	623a      	str	r2, [r7, #32]
 8003242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	69f9      	ldr	r1, [r7, #28]
 8003246:	6a3a      	ldr	r2, [r7, #32]
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	61bb      	str	r3, [r7, #24]
   return(result);
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e5      	bne.n	8003220 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b10      	cmp	r3, #16
 8003260:	d10a      	bne.n	8003278 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800327c:	4619      	mov	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff fe2e 	bl	8002ee0 <HAL_UARTEx_RxEventCallback>
 8003284:	e002      	b.n	800328c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd f8f0 	bl	800046c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e002      	b.n	8003296 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3730      	adds	r7, #48	; 0x30
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032da:	f023 030c 	bic.w	r3, r3, #12
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <UART_SetConfig+0x114>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d103      	bne.n	8003310 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7ff fa9e 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	e002      	b.n	8003316 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003310:	f7ff fa86 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8003314:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009a      	lsls	r2, r3, #2
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <UART_SetConfig+0x118>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	0119      	lsls	r1, r3, #4
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009a      	lsls	r2, r3, #2
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fbb2 f2f3 	udiv	r2, r2, r3
 800334c:	4b1a      	ldr	r3, [pc, #104]	; (80033b8 <UART_SetConfig+0x118>)
 800334e:	fba3 0302 	umull	r0, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2064      	movs	r0, #100	; 0x64
 8003356:	fb00 f303 	mul.w	r3, r0, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	3332      	adds	r3, #50	; 0x32
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <UART_SetConfig+0x118>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336c:	4419      	add	r1, r3
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009a      	lsls	r2, r3, #2
 8003378:	441a      	add	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	fbb2 f2f3 	udiv	r2, r2, r3
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <UART_SetConfig+0x118>)
 8003386:	fba3 0302 	umull	r0, r3, r3, r2
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2064      	movs	r0, #100	; 0x64
 800338e:	fb00 f303 	mul.w	r3, r0, r3
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	3332      	adds	r3, #50	; 0x32
 8003398:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <UART_SetConfig+0x118>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	f003 020f 	and.w	r2, r3, #15
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	440a      	add	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40013800 	.word	0x40013800
 80033b8:	51eb851f 	.word	0x51eb851f

080033bc <atoi>:
 80033bc:	220a      	movs	r2, #10
 80033be:	2100      	movs	r1, #0
 80033c0:	f000 b87e 	b.w	80034c0 <strtol>

080033c4 <_strtol_l.constprop.0>:
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ca:	4686      	mov	lr, r0
 80033cc:	4690      	mov	r8, r2
 80033ce:	d001      	beq.n	80033d4 <_strtol_l.constprop.0+0x10>
 80033d0:	2b24      	cmp	r3, #36	; 0x24
 80033d2:	d906      	bls.n	80033e2 <_strtol_l.constprop.0+0x1e>
 80033d4:	f000 f886 	bl	80034e4 <__errno>
 80033d8:	2316      	movs	r3, #22
 80033da:	6003      	str	r3, [r0, #0]
 80033dc:	2000      	movs	r0, #0
 80033de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e2:	460d      	mov	r5, r1
 80033e4:	4835      	ldr	r0, [pc, #212]	; (80034bc <_strtol_l.constprop.0+0xf8>)
 80033e6:	462a      	mov	r2, r5
 80033e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80033ec:	5d06      	ldrb	r6, [r0, r4]
 80033ee:	f016 0608 	ands.w	r6, r6, #8
 80033f2:	d1f8      	bne.n	80033e6 <_strtol_l.constprop.0+0x22>
 80033f4:	2c2d      	cmp	r4, #45	; 0x2d
 80033f6:	d12e      	bne.n	8003456 <_strtol_l.constprop.0+0x92>
 80033f8:	2601      	movs	r6, #1
 80033fa:	782c      	ldrb	r4, [r5, #0]
 80033fc:	1c95      	adds	r5, r2, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d057      	beq.n	80034b2 <_strtol_l.constprop.0+0xee>
 8003402:	2b10      	cmp	r3, #16
 8003404:	d109      	bne.n	800341a <_strtol_l.constprop.0+0x56>
 8003406:	2c30      	cmp	r4, #48	; 0x30
 8003408:	d107      	bne.n	800341a <_strtol_l.constprop.0+0x56>
 800340a:	782a      	ldrb	r2, [r5, #0]
 800340c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003410:	2a58      	cmp	r2, #88	; 0x58
 8003412:	d149      	bne.n	80034a8 <_strtol_l.constprop.0+0xe4>
 8003414:	2310      	movs	r3, #16
 8003416:	786c      	ldrb	r4, [r5, #1]
 8003418:	3502      	adds	r5, #2
 800341a:	2200      	movs	r2, #0
 800341c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003420:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003424:	fbbc f9f3 	udiv	r9, ip, r3
 8003428:	4610      	mov	r0, r2
 800342a:	fb03 ca19 	mls	sl, r3, r9, ip
 800342e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003432:	2f09      	cmp	r7, #9
 8003434:	d814      	bhi.n	8003460 <_strtol_l.constprop.0+0x9c>
 8003436:	463c      	mov	r4, r7
 8003438:	42a3      	cmp	r3, r4
 800343a:	dd20      	ble.n	800347e <_strtol_l.constprop.0+0xba>
 800343c:	1c57      	adds	r7, r2, #1
 800343e:	d007      	beq.n	8003450 <_strtol_l.constprop.0+0x8c>
 8003440:	4581      	cmp	r9, r0
 8003442:	d319      	bcc.n	8003478 <_strtol_l.constprop.0+0xb4>
 8003444:	d101      	bne.n	800344a <_strtol_l.constprop.0+0x86>
 8003446:	45a2      	cmp	sl, r4
 8003448:	db16      	blt.n	8003478 <_strtol_l.constprop.0+0xb4>
 800344a:	2201      	movs	r2, #1
 800344c:	fb00 4003 	mla	r0, r0, r3, r4
 8003450:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003454:	e7eb      	b.n	800342e <_strtol_l.constprop.0+0x6a>
 8003456:	2c2b      	cmp	r4, #43	; 0x2b
 8003458:	bf04      	itt	eq
 800345a:	782c      	ldrbeq	r4, [r5, #0]
 800345c:	1c95      	addeq	r5, r2, #2
 800345e:	e7ce      	b.n	80033fe <_strtol_l.constprop.0+0x3a>
 8003460:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003464:	2f19      	cmp	r7, #25
 8003466:	d801      	bhi.n	800346c <_strtol_l.constprop.0+0xa8>
 8003468:	3c37      	subs	r4, #55	; 0x37
 800346a:	e7e5      	b.n	8003438 <_strtol_l.constprop.0+0x74>
 800346c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003470:	2f19      	cmp	r7, #25
 8003472:	d804      	bhi.n	800347e <_strtol_l.constprop.0+0xba>
 8003474:	3c57      	subs	r4, #87	; 0x57
 8003476:	e7df      	b.n	8003438 <_strtol_l.constprop.0+0x74>
 8003478:	f04f 32ff 	mov.w	r2, #4294967295
 800347c:	e7e8      	b.n	8003450 <_strtol_l.constprop.0+0x8c>
 800347e:	1c53      	adds	r3, r2, #1
 8003480:	d108      	bne.n	8003494 <_strtol_l.constprop.0+0xd0>
 8003482:	2322      	movs	r3, #34	; 0x22
 8003484:	4660      	mov	r0, ip
 8003486:	f8ce 3000 	str.w	r3, [lr]
 800348a:	f1b8 0f00 	cmp.w	r8, #0
 800348e:	d0a6      	beq.n	80033de <_strtol_l.constprop.0+0x1a>
 8003490:	1e69      	subs	r1, r5, #1
 8003492:	e006      	b.n	80034a2 <_strtol_l.constprop.0+0xde>
 8003494:	b106      	cbz	r6, 8003498 <_strtol_l.constprop.0+0xd4>
 8003496:	4240      	negs	r0, r0
 8003498:	f1b8 0f00 	cmp.w	r8, #0
 800349c:	d09f      	beq.n	80033de <_strtol_l.constprop.0+0x1a>
 800349e:	2a00      	cmp	r2, #0
 80034a0:	d1f6      	bne.n	8003490 <_strtol_l.constprop.0+0xcc>
 80034a2:	f8c8 1000 	str.w	r1, [r8]
 80034a6:	e79a      	b.n	80033de <_strtol_l.constprop.0+0x1a>
 80034a8:	2430      	movs	r4, #48	; 0x30
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1b5      	bne.n	800341a <_strtol_l.constprop.0+0x56>
 80034ae:	2308      	movs	r3, #8
 80034b0:	e7b3      	b.n	800341a <_strtol_l.constprop.0+0x56>
 80034b2:	2c30      	cmp	r4, #48	; 0x30
 80034b4:	d0a9      	beq.n	800340a <_strtol_l.constprop.0+0x46>
 80034b6:	230a      	movs	r3, #10
 80034b8:	e7af      	b.n	800341a <_strtol_l.constprop.0+0x56>
 80034ba:	bf00      	nop
 80034bc:	080042df 	.word	0x080042df

080034c0 <strtol>:
 80034c0:	4613      	mov	r3, r2
 80034c2:	460a      	mov	r2, r1
 80034c4:	4601      	mov	r1, r0
 80034c6:	4802      	ldr	r0, [pc, #8]	; (80034d0 <strtol+0x10>)
 80034c8:	6800      	ldr	r0, [r0, #0]
 80034ca:	f7ff bf7b 	b.w	80033c4 <_strtol_l.constprop.0>
 80034ce:	bf00      	nop
 80034d0:	20000060 	.word	0x20000060

080034d4 <memset>:
 80034d4:	4603      	mov	r3, r0
 80034d6:	4402      	add	r2, r0
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	f803 1b01 	strb.w	r1, [r3], #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <__errno>:
 80034e4:	4b01      	ldr	r3, [pc, #4]	; (80034ec <__errno+0x8>)
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000060 	.word	0x20000060

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	2600      	movs	r6, #0
 80034f4:	4d0c      	ldr	r5, [pc, #48]	; (8003528 <__libc_init_array+0x38>)
 80034f6:	4c0d      	ldr	r4, [pc, #52]	; (800352c <__libc_init_array+0x3c>)
 80034f8:	1b64      	subs	r4, r4, r5
 80034fa:	10a4      	asrs	r4, r4, #2
 80034fc:	42a6      	cmp	r6, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	f000 f81a 	bl	8003538 <_init>
 8003504:	2600      	movs	r6, #0
 8003506:	4d0a      	ldr	r5, [pc, #40]	; (8003530 <__libc_init_array+0x40>)
 8003508:	4c0a      	ldr	r4, [pc, #40]	; (8003534 <__libc_init_array+0x44>)
 800350a:	1b64      	subs	r4, r4, r5
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	42a6      	cmp	r6, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	f855 3b04 	ldr.w	r3, [r5], #4
 8003518:	4798      	blx	r3
 800351a:	3601      	adds	r6, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003522:	4798      	blx	r3
 8003524:	3601      	adds	r6, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	080043e0 	.word	0x080043e0
 800352c:	080043e0 	.word	0x080043e0
 8003530:	080043e0 	.word	0x080043e0
 8003534:	080043e4 	.word	0x080043e4

08003538 <_init>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr

08003544 <_fini>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	bf00      	nop
 8003548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354a:	bc08      	pop	{r3}
 800354c:	469e      	mov	lr, r3
 800354e:	4770      	bx	lr
