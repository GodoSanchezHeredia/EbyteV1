
Hakim_TX_Lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f40  08004f40  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f48  08004f48  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000005c  08004fac  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08004fac  00020344  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be84  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d82  00000000  00000000  0002bf51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002dcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000691  00000000  00000000  0002e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275ac  00000000  00000000  0002ec01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c62f  00000000  00000000  000561ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5e46  00000000  00000000  000627dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026ec  00000000  00000000  00158624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004ed4 	.word	0x08004ed4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004ed4 	.word	0x08004ed4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Lora_Init>:
#include "string.h"

extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart5;

void Lora_Init(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80005f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005f4:	f000 fc40 	bl	8000e78 <HAL_Delay>
	HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin,1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	4814      	ldr	r0, [pc, #80]	; (8000650 <Lora_Init+0x64>)
 8000600:	f001 fbdc 	bl	8001dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin,1);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060a:	4811      	ldr	r0, [pc, #68]	; (8000650 <Lora_Init+0x64>)
 800060c:	f001 fbd6 	bl	8001dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8000610:	2201      	movs	r2, #1
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	480f      	ldr	r0, [pc, #60]	; (8000654 <Lora_Init+0x68>)
 8000616:	f001 fbd1 	bl	8001dbc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800061a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061e:	f000 fc2b 	bl	8000e78 <HAL_Delay>
	HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin,0);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <Lora_Init+0x64>)
 800062a:	f001 fbc7 	bl	8001dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin,0);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <Lora_Init+0x64>)
 8000636:	f001 fbc1 	bl	8001dbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 800063a:	2200      	movs	r2, #0
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <Lora_Init+0x68>)
 8000640:	f001 fbbc 	bl	8001dbc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000644:	20c8      	movs	r0, #200	; 0xc8
 8000646:	f000 fc17 	bl	8000e78 <HAL_Delay>

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020800 	.word	0x40020800
 8000654:	40020400 	.word	0x40020400

08000658 <Lora_Tx>:
uint16_t ADCValue = 0;
uint8_t dato_tx[25] = "";
void Lora_Tx(void){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 800065c:	4813      	ldr	r0, [pc, #76]	; (80006ac <Lora_Tx+0x54>)
 800065e:	f000 fc73 	bl	8000f48 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 8000662:	4913      	ldr	r1, [pc, #76]	; (80006b0 <Lora_Tx+0x58>)
 8000664:	4811      	ldr	r0, [pc, #68]	; (80006ac <Lora_Tx+0x54>)
 8000666:	f000 fd71 	bl	800114c <HAL_ADC_PollForConversion>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d106      	bne.n	800067e <Lora_Tx+0x26>
	ADCValue = HAL_ADC_GetValue(&hadc1);
 8000670:	480e      	ldr	r0, [pc, #56]	; (80006ac <Lora_Tx+0x54>)
 8000672:	f000 fdf6 	bl	8001262 <HAL_ADC_GetValue>
 8000676:	4603      	mov	r3, r0
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <Lora_Tx+0x5c>)
 800067c:	801a      	strh	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <Lora_Tx+0x54>)
 8000680:	f000 fd30 	bl	80010e4 <HAL_ADC_Stop>

	sprintf(dato_tx,"%04u*",ADCValue);
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <Lora_Tx+0x5c>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	490b      	ldr	r1, [pc, #44]	; (80006b8 <Lora_Tx+0x60>)
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <Lora_Tx+0x64>)
 800068e:	f003 ff7d 	bl	800458c <siprintf>

HAL_UART_Transmit(&huart5, dato_tx, strlen(dato_tx),8000);
 8000692:	480a      	ldr	r0, [pc, #40]	; (80006bc <Lora_Tx+0x64>)
 8000694:	f7ff fdd4 	bl	8000240 <strlen>
 8000698:	4603      	mov	r3, r0
 800069a:	b29a      	uxth	r2, r3
 800069c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80006a0:	4906      	ldr	r1, [pc, #24]	; (80006bc <Lora_Tx+0x64>)
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <Lora_Tx+0x68>)
 80006a4:	f002 fcae 	bl	8003004 <HAL_UART_Transmit>

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000098 	.word	0x20000098
 80006b0:	000f4240 	.word	0x000f4240
 80006b4:	20000078 	.word	0x20000078
 80006b8:	08004eec 	.word	0x08004eec
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	200000e0 	.word	0x200000e0

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 fb79 	bl	8000dbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f81a 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f932 	bl	8000938 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006d4:	f000 f87e 	bl	80007d4 <MX_ADC1_Init>
  MX_UART5_Init();
 80006d8:	f000 f8ce 	bl	8000878 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80006dc:	f000 f8fc 	bl	80008d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Lora_Init();
 80006e0:	f7ff ff84 	bl	80005ec <Lora_Init>
  HAL_UART_Receive_IT(&huart5,&rx, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	4905      	ldr	r1, [pc, #20]	; (80006fc <main+0x38>)
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <main+0x3c>)
 80006ea:	f002 fd0e 	bl	800310a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Lora_Tx();
 80006ee:	f7ff ffb3 	bl	8000658 <Lora_Tx>
	  HAL_Delay(1000);
 80006f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f6:	f000 fbbf 	bl	8000e78 <HAL_Delay>
	  Lora_Tx();
 80006fa:	e7f8      	b.n	80006ee <main+0x2a>
 80006fc:	200001f0 	.word	0x200001f0
 8000700:	200000e0 	.word	0x200000e0

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	; 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 ff5a 	bl	80045cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xc8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a27      	ldr	r2, [pc, #156]	; (80007cc <SystemClock_Config+0xc8>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <SystemClock_Config+0xc8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xcc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <SystemClock_Config+0xcc>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <SystemClock_Config+0xcc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000774:	23a8      	movs	r3, #168	; 0xa8
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4618      	mov	r0, r3
 800078a:	f001 fb31 	bl	8001df0 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000794:	f000 f958 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2102      	movs	r1, #2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fdc9 	bl	800234c <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007c0:	f000 f942 	bl	8000a48 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007e6:	4b21      	ldr	r3, [pc, #132]	; (800086c <MX_ADC1_Init+0x98>)
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <MX_ADC1_Init+0x9c>)
 80007ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_ADC1_Init+0x98>)
 80007ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_ADC1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_ADC1_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_ADC1_Init+0x98>)
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <MX_ADC1_Init+0xa0>)
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_ADC1_Init+0x98>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_ADC1_Init+0x98>)
 8000822:	2201      	movs	r2, #1
 8000824:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_ADC1_Init+0x98>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_ADC1_Init+0x98>)
 8000830:	2201      	movs	r2, #1
 8000832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_ADC1_Init+0x98>)
 8000836:	f000 fb43 	bl	8000ec0 <HAL_ADC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 f902 	bl	8000a48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000844:	230a      	movs	r3, #10
 8000846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000848:	2301      	movs	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_ADC1_Init+0x98>)
 8000856:	f000 fd11 	bl	800127c <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000860:	f000 f8f2 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000098 	.word	0x20000098
 8000870:	40012000 	.word	0x40012000
 8000874:	0f000001 	.word	0x0f000001

08000878 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_UART5_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_UART5_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_UART5_Init+0x58>)
 8000884:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000888:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_UART5_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_UART5_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_UART5_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_UART5_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_UART5_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_UART5_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_UART5_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_UART5_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_UART5_Init+0x58>)
 80008bc:	f002 fb54 	bl	8002f68 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f8bf 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000e0 	.word	0x200000e0
 80008d4:	40005000 	.word	0x40005000

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <MX_USART2_UART_Init+0x5c>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0x58>)
 800091c:	f002 fb24 	bl	8002f68 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 f88f 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000168 	.word	0x20000168
 8000934:	40004400 	.word	0x40004400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a27      	ldr	r2, [pc, #156]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <MX_GPIO_Init+0xb8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xb8>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_GPIO_Init+0xb8>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_GPIO_Init+0xb8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800099c:	4815      	ldr	r0, [pc, #84]	; (80009f4 <MX_GPIO_Init+0xbc>)
 800099e:	f001 fa0d 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2180      	movs	r1, #128	; 0x80
 80009a6:	4814      	ldr	r0, [pc, #80]	; (80009f8 <MX_GPIO_Init+0xc0>)
 80009a8:	f001 fa08 	bl	8001dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 80009ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	480b      	ldr	r0, [pc, #44]	; (80009f4 <MX_GPIO_Init+0xbc>)
 80009c6:	f001 f84d 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_GPIO_Init+0xc0>)
 80009e2:	f001 f83f 	bl	8001a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020400 	.word	0x40020400

080009fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]

	if (rx=='a') HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_UART_RxCpltCallback+0x40>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b61      	cmp	r3, #97	; 0x61
 8000a0a:	d105      	bne.n	8000a18 <HAL_UART_RxCpltCallback+0x1c>
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2180      	movs	r1, #128	; 0x80
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <HAL_UART_RxCpltCallback+0x44>)
 8000a12:	f001 f9d3 	bl	8001dbc <HAL_GPIO_WritePin>
 8000a16:	e008      	b.n	8000a2a <HAL_UART_RxCpltCallback+0x2e>
	else if(rx=='b')HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_UART_RxCpltCallback+0x40>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b62      	cmp	r3, #98	; 0x62
 8000a1e:	d104      	bne.n	8000a2a <HAL_UART_RxCpltCallback+0x2e>
 8000a20:	2200      	movs	r2, #0
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_UART_RxCpltCallback+0x44>)
 8000a26:	f001 f9c9 	bl	8001dbc <HAL_GPIO_WritePin>

	  HAL_UART_Receive_IT(&huart5,&rx, 1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4903      	ldr	r1, [pc, #12]	; (8000a3c <HAL_UART_RxCpltCallback+0x40>)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <HAL_UART_RxCpltCallback+0x48>)
 8000a30:	f002 fb6b 	bl	800310a <HAL_UART_Receive_IT>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001f0 	.word	0x200001f0
 8000a40:	40020400 	.word	0x40020400
 8000a44:	200000e0 	.word	0x200000e0

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_MspInit+0x44>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_MspInit+0x44>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x44>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x44>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x44>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <HAL_ADC_MspInit+0x74>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d123      	bne.n	8000b06 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_ADC_MspInit+0x78>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_ADC_MspInit+0x78>)
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_ADC_MspInit+0x78>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_ADC_MspInit+0x78>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_ADC_MspInit+0x78>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_ADC_MspInit+0x78>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aee:	2301      	movs	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_ADC_MspInit+0x7c>)
 8000b02:	f000 ffaf 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40012000 	.word	0x40012000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020800 	.word	0x40020800

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0b0      	sub	sp, #192	; 0xc0
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	2290      	movs	r2, #144	; 0x90
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fd45 	bl	80045cc <memset>
  if(huart->Instance==UART5)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <HAL_UART_MspInit+0x144>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d145      	bne.n	8000bd8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b50:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fddc 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b66:	f7ff ff6f 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b6a:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a3d      	ldr	r2, [pc, #244]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000b70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b7e:	61bb      	str	r3, [r7, #24]
 8000b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a37      	ldr	r2, [pc, #220]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4829      	ldr	r0, [pc, #164]	; (8000c68 <HAL_UART_MspInit+0x14c>)
 8000bc2:	f000 ff4f 	bl	8001a64 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2035      	movs	r0, #53	; 0x35
 8000bcc:	f000 fe81 	bl	80018d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000bd0:	2035      	movs	r0, #53	; 0x35
 8000bd2:	f000 fe9a 	bl	800190a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bd6:	e03f      	b.n	8000c58 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <HAL_UART_MspInit+0x150>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13a      	bne.n	8000c58 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 fd92 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000bfa:	f7ff ff25 	bl	8000a48 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_UART_MspInit+0x148>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c46:	2307      	movs	r3, #7
 8000c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <HAL_UART_MspInit+0x154>)
 8000c54:	f000 ff06 	bl	8001a64 <HAL_GPIO_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	37c0      	adds	r7, #192	; 0xc0
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40005000 	.word	0x40005000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40020000 	.word	0x40020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f8ba 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <UART5_IRQHandler+0x10>)
 8000cce:	f002 fa61 	bl	8003194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200000e0 	.word	0x200000e0

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f003 fc66 	bl	80045dc <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20080000 	.word	0x20080000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	200001f4 	.word	0x200001f4
 8000d44:	20000348 	.word	0x20000348

08000d48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d72:	490e      	ldr	r1, [pc, #56]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d74:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d88:	4c0b      	ldr	r4, [pc, #44]	; (8000db8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d96:	f7ff ffd7 	bl	8000d48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f003 fc25 	bl	80045e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fc91 	bl	80006c4 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000db0:	08004f50 	.word	0x08004f50
  ldr r2, =_sbss
 8000db4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000db8:	20000344 	.word	0x20000344

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>

08000dbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f000 fd7a 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc8:	200f      	movs	r0, #15
 8000dca:	f000 f805 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dce:	f7ff fe41 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fd95 	bl	8001926 <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 fd5d 	bl	80018d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200001f8 	.word	0x200001f8

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200001f8 	.word	0x200001f8

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e031      	b.n	8000f3a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d109      	bne.n	8000ef2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fddc 	bl	8000a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d116      	bne.n	8000f2c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_ADC_Init+0x84>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	f043 0202 	orr.w	r2, r3, #2
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 fb0a 	bl	8001528 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	f043 0201 	orr.w	r2, r3, #1
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40
 8000f2a:	e001      	b.n	8000f30 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	ffffeefd 	.word	0xffffeefd

08000f48 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d101      	bne.n	8000f62 <HAL_ADC_Start+0x1a>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e0ad      	b.n	80010be <HAL_ADC_Start+0x176>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d018      	beq.n	8000faa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0201 	orr.w	r2, r2, #1
 8000f86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000f88:	4b50      	ldr	r3, [pc, #320]	; (80010cc <HAL_ADC_Start+0x184>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a50      	ldr	r2, [pc, #320]	; (80010d0 <HAL_ADC_Start+0x188>)
 8000f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f92:	0c9a      	lsrs	r2, r3, #18
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000f9c:	e002      	b.n	8000fa4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f9      	bne.n	8000f9e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d175      	bne.n	80010a4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fbc:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <HAL_ADC_Start+0x18c>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ff2:	d106      	bne.n	8001002 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff8:	f023 0206 	bic.w	r2, r3, #6
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	645a      	str	r2, [r3, #68]	; 0x44
 8001000:	e002      	b.n	8001008 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001018:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <HAL_ADC_Start+0x190>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10f      	bne.n	8001046 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d143      	bne.n	80010bc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	e03a      	b.n	80010bc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a24      	ldr	r2, [pc, #144]	; (80010dc <HAL_ADC_Start+0x194>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d10e      	bne.n	800106e <HAL_ADC_Start+0x126>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d107      	bne.n	800106e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800106c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_ADC_Start+0x190>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	2b00      	cmp	r3, #0
 8001078:	d120      	bne.n	80010bc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <HAL_ADC_Start+0x198>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d11b      	bne.n	80010bc <HAL_ADC_Start+0x174>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d114      	bne.n	80010bc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	e00b      	b.n	80010bc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f043 0210 	orr.w	r2, r3, #16
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b4:	f043 0201 	orr.w	r2, r3, #1
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000000 	.word	0x20000000
 80010d0:	431bde83 	.word	0x431bde83
 80010d4:	fffff8fe 	.word	0xfffff8fe
 80010d8:	40012300 	.word	0x40012300
 80010dc:	40012000 	.word	0x40012000
 80010e0:	40012200 	.word	0x40012200

080010e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Stop+0x16>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e01f      	b.n	800113a <HAL_ADC_Stop+0x56>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0201 	bic.w	r2, r2, #1
 8001110:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d107      	bne.n	8001130 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_ADC_Stop+0x64>)
 8001126:	4013      	ands	r3, r2
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	ffffeefe 	.word	0xffffeefe

0800114c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001168:	d113      	bne.n	8001192 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001178:	d10b      	bne.n	8001192 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f043 0220 	orr.w	r2, r3, #32
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e063      	b.n	800125a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001192:	f7ff fe65 	bl	8000e60 <HAL_GetTick>
 8001196:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001198:	e021      	b.n	80011de <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d01d      	beq.n	80011de <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <HAL_ADC_PollForConversion+0x6c>
 80011a8:	f7ff fe5a 	bl	8000e60 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d212      	bcs.n	80011de <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d00b      	beq.n	80011de <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f043 0204 	orr.w	r2, r3, #4
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e03d      	b.n	800125a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d1d6      	bne.n	800119a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f06f 0212 	mvn.w	r2, #18
 80011f4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d123      	bne.n	8001258 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001214:	2b00      	cmp	r3, #0
 8001216:	d11f      	bne.n	8001258 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001230:	2b00      	cmp	r3, #0
 8001232:	d111      	bne.n	8001258 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f043 0201 	orr.w	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_ADC_ConfigChannel+0x1c>
 8001294:	2302      	movs	r3, #2
 8001296:	e136      	b.n	8001506 <HAL_ADC_ConfigChannel+0x28a>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	d93a      	bls.n	800131e <HAL_ADC_ConfigChannel+0xa2>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012b0:	d035      	beq.n	800131e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68d9      	ldr	r1, [r3, #12]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	3b1e      	subs	r3, #30
 80012c8:	2207      	movs	r2, #7
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	400a      	ands	r2, r1
 80012d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a8d      	ldr	r2, [pc, #564]	; (8001514 <HAL_ADC_ConfigChannel+0x298>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10a      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68d9      	ldr	r1, [r3, #12]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	061a      	lsls	r2, r3, #24
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012f6:	e035      	b.n	8001364 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68d9      	ldr	r1, [r3, #12]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	4603      	mov	r3, r0
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4403      	add	r3, r0
 8001310:	3b1e      	subs	r3, #30
 8001312:	409a      	lsls	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800131c:	e022      	b.n	8001364 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6919      	ldr	r1, [r3, #16]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	461a      	mov	r2, r3
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	2207      	movs	r2, #7
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43da      	mvns	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	400a      	ands	r2, r1
 8001340:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6919      	ldr	r1, [r3, #16]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	4603      	mov	r3, r0
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4403      	add	r3, r0
 800135a:	409a      	lsls	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b06      	cmp	r3, #6
 800136a:	d824      	bhi.n	80013b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3b05      	subs	r3, #5
 800137e:	221f      	movs	r2, #31
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43da      	mvns	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	400a      	ands	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4618      	mov	r0, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3b05      	subs	r3, #5
 80013a8:	fa00 f203 	lsl.w	r2, r0, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
 80013b4:	e04c      	b.n	8001450 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	d824      	bhi.n	8001408 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b23      	subs	r3, #35	; 0x23
 80013d0:	221f      	movs	r2, #31
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	3b23      	subs	r3, #35	; 0x23
 80013fa:	fa00 f203 	lsl.w	r2, r0, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
 8001406:	e023      	b.n	8001450 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	3b41      	subs	r3, #65	; 0x41
 800141a:	221f      	movs	r2, #31
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43da      	mvns	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	400a      	ands	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3b41      	subs	r3, #65	; 0x41
 8001444:	fa00 f203 	lsl.w	r2, r0, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a30      	ldr	r2, [pc, #192]	; (8001518 <HAL_ADC_ConfigChannel+0x29c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10a      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1f4>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001462:	d105      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a2c      	ldr	r2, [pc, #176]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 800146a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800146e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a28      	ldr	r2, [pc, #160]	; (8001518 <HAL_ADC_ConfigChannel+0x29c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10f      	bne.n	800149a <HAL_ADC_ConfigChannel+0x21e>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b12      	cmp	r3, #18
 8001480:	d10b      	bne.n	800149a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a25      	ldr	r2, [pc, #148]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 8001488:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800148c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4a22      	ldr	r2, [pc, #136]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 8001494:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001498:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <HAL_ADC_ConfigChannel+0x29c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d12b      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x280>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_ADC_ConfigChannel+0x298>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d003      	beq.n	80014b6 <HAL_ADC_ConfigChannel+0x23a>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b11      	cmp	r3, #17
 80014b4:	d122      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 80014bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80014c0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <HAL_ADC_ConfigChannel+0x2a0>)
 80014c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_ADC_ConfigChannel+0x298>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d111      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_ADC_ConfigChannel+0x2a4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_ADC_ConfigChannel+0x2a8>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0c9a      	lsrs	r2, r3, #18
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014ee:	e002      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f9      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	10000012 	.word	0x10000012
 8001518:	40012000 	.word	0x40012000
 800151c:	40012300 	.word	0x40012300
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83

08001528 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001530:	4b78      	ldr	r3, [pc, #480]	; (8001714 <ADC_Init+0x1ec>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4a77      	ldr	r2, [pc, #476]	; (8001714 <ADC_Init+0x1ec>)
 8001536:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800153a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800153c:	4b75      	ldr	r3, [pc, #468]	; (8001714 <ADC_Init+0x1ec>)
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4973      	ldr	r1, [pc, #460]	; (8001714 <ADC_Init+0x1ec>)
 8001546:	4313      	orrs	r3, r2
 8001548:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	021a      	lsls	r2, r3, #8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800157c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6899      	ldr	r1, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68da      	ldr	r2, [r3, #12]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	4a58      	ldr	r2, [pc, #352]	; (8001718 <ADC_Init+0x1f0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6899      	ldr	r1, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e00f      	b.n	8001622 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001620:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0202 	bic.w	r2, r2, #2
 8001630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6899      	ldr	r1, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	005a      	lsls	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01b      	beq.n	8001688 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800165e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800166e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	3b01      	subs	r3, #1
 800167c:	035a      	lsls	r2, r3, #13
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	e007      	b.n	8001698 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001696:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	051a      	lsls	r2, r3, #20
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6899      	ldr	r1, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016da:	025a      	lsls	r2, r3, #9
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6899      	ldr	r1, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	029a      	lsls	r2, r3, #10
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	609a      	str	r2, [r3, #8]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40012300 	.word	0x40012300
 8001718:	0f000001 	.word	0x0f000001

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <__NVIC_SetPriorityGrouping+0x40>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001746:	4313      	orrs	r3, r2
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <__NVIC_SetPriorityGrouping+0x40>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00
 8001760:	05fa0000 	.word	0x05fa0000

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0b      	blt.n	80017aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <__NVIC_EnableIRQ+0x38>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001888:	d301      	bcc.n	800188e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188a:	2301      	movs	r3, #1
 800188c:	e00f      	b.n	80018ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <SysTick_Config+0x40>)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3b01      	subs	r3, #1
 8001894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001896:	210f      	movs	r1, #15
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f7ff ff8e 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <SysTick_Config+0x40>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a6:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <SysTick_Config+0x40>)
 80018a8:	2207      	movs	r2, #7
 80018aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	e000e010 	.word	0xe000e010

080018bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff29 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b086      	sub	sp, #24
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e4:	f7ff ff3e 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68b9      	ldr	r1, [r7, #8]
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f7ff ff8e 	bl	8001810 <NVIC_EncodePriority>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff5d 	bl	80017bc <__NVIC_SetPriority>
}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff31 	bl	8001780 <__NVIC_EnableIRQ>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ffa2 	bl	8001878 <SysTick_Config>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff fa88 	bl	8000e60 <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d008      	beq.n	8001970 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e052      	b.n	8001a16 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0216 	bic.w	r2, r2, #22
 800197e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800198e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	2b00      	cmp	r3, #0
 8001996:	d103      	bne.n	80019a0 <HAL_DMA_Abort+0x62>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0208 	bic.w	r2, r2, #8
 80019ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c0:	e013      	b.n	80019ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c2:	f7ff fa4d 	bl	8000e60 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d90c      	bls.n	80019ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2220      	movs	r2, #32
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e015      	b.n	8001a16 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e4      	bne.n	80019c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	223f      	movs	r2, #63	; 0x3f
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d004      	beq.n	8001a3c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e00c      	b.n	8001a56 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2205      	movs	r2, #5
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	e175      	b.n	8001d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a84:	2201      	movs	r2, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8164 	bne.w	8001d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d005      	beq.n	8001aba <HAL_GPIO_Init+0x56>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d130      	bne.n	8001b1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 0201 	and.w	r2, r3, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d017      	beq.n	8001b58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	2203      	movs	r2, #3
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d123      	bne.n	8001bac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	08da      	lsrs	r2, r3, #3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3208      	adds	r2, #8
 8001b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	08da      	lsrs	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3208      	adds	r2, #8
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0203 	and.w	r2, r3, #3
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80be 	beq.w	8001d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <HAL_GPIO_Init+0x324>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c06:	4a61      	ldr	r2, [pc, #388]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_GPIO_Init+0x32c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d037      	beq.n	8001ca2 <HAL_GPIO_Init+0x23e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_GPIO_Init+0x330>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d031      	beq.n	8001c9e <HAL_GPIO_Init+0x23a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a56      	ldr	r2, [pc, #344]	; (8001d98 <HAL_GPIO_Init+0x334>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <HAL_GPIO_Init+0x236>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_GPIO_Init+0x338>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x232>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a54      	ldr	r2, [pc, #336]	; (8001da0 <HAL_GPIO_Init+0x33c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x22e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <HAL_GPIO_Init+0x340>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x22a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_GPIO_Init+0x344>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x348>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x222>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_GPIO_Init+0x34c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x21e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4f      	ldr	r2, [pc, #316]	; (8001db4 <HAL_GPIO_Init+0x350>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x21a>
 8001c7a:	2309      	movs	r3, #9
 8001c7c:	e012      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c7e:	230a      	movs	r3, #10
 8001c80:	e010      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00e      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e00c      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	e00a      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c8e:	2305      	movs	r3, #5
 8001c90:	e008      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c92:	2304      	movs	r3, #4
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c96:	2303      	movs	r3, #3
 8001c98:	e004      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e002      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x240>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
 8001caa:	0092      	lsls	r2, r2, #2
 8001cac:	4093      	lsls	r3, r2
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cb4:	4935      	ldr	r1, [pc, #212]	; (8001d8c <HAL_GPIO_Init+0x328>)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce6:	4a34      	ldr	r2, [pc, #208]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cec:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d10:	4a29      	ldr	r2, [pc, #164]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <HAL_GPIO_Init+0x354>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61fb      	str	r3, [r7, #28]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b0f      	cmp	r3, #15
 8001d74:	f67f ae86 	bls.w	8001a84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400
 8001d98:	40020800 	.word	0x40020800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40021800 	.word	0x40021800
 8001dac:	40021c00 	.word	0x40021c00
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40022400 	.word	0x40022400
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e29b      	b.n	800233e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8087 	beq.w	8001f22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e14:	4b96      	ldr	r3, [pc, #600]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d00c      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e20:	4b93      	ldr	r3, [pc, #588]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d112      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62>
 8001e2c:	4b90      	ldr	r3, [pc, #576]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e38:	d10b      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3a:	4b8d      	ldr	r3, [pc, #564]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d06c      	beq.n	8001f20 <HAL_RCC_OscConfig+0x130>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d168      	bne.n	8001f20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e275      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x7a>
 8001e5c:	4b84      	ldr	r3, [pc, #528]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a83      	ldr	r2, [pc, #524]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e02e      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x9c>
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a7e      	ldr	r2, [pc, #504]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7b      	ldr	r2, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e01d      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xc0>
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	4b73      	ldr	r3, [pc, #460]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a72      	ldr	r2, [pc, #456]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0xd8>
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a6e      	ldr	r2, [pc, #440]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b6c      	ldr	r3, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6b      	ldr	r2, [pc, #428]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ffc6 	bl	8000e60 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7fe ffc2 	bl	8000e60 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e229      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b61      	ldr	r3, [pc, #388]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0xe8>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe ffb2 	bl	8000e60 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7fe ffae 	bl	8000e60 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e215      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	4b57      	ldr	r3, [pc, #348]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x110>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d069      	beq.n	8002002 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f2e:	4b50      	ldr	r3, [pc, #320]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d11c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x190>
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d116      	bne.n	8001f80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_RCC_OscConfig+0x17a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e1e9      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	493d      	ldr	r1, [pc, #244]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	e040      	b.n	8002002 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d023      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f88:	4b39      	ldr	r3, [pc, #228]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a38      	ldr	r2, [pc, #224]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe ff64 	bl	8000e60 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7fe ff60 	bl	8000e60 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e1c7      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fae:	4b30      	ldr	r3, [pc, #192]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4929      	ldr	r1, [pc, #164]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
 8001fce:	e018      	b.n	8002002 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a26      	ldr	r2, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe ff40 	bl	8000e60 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7fe ff3c 	bl	8000e60 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1a3      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d038      	beq.n	8002080 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d019      	beq.n	800204a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8002018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201a:	4a15      	ldr	r2, [pc, #84]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7fe ff1d 	bl	8000e60 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202a:	f7fe ff19 	bl	8000e60 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e180      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x23a>
 8002048:	e01a      	b.n	8002080 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 800204c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204e:	4a08      	ldr	r2, [pc, #32]	; (8002070 <HAL_RCC_OscConfig+0x280>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7fe ff03 	bl	8000e60 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205e:	f7fe feff 	bl	8000e60 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d903      	bls.n	8002074 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e166      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
 8002070:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b92      	ldr	r3, [pc, #584]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ee      	bne.n	800205e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a4 	beq.w	80021d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10d      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b89      	ldr	r3, [pc, #548]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a88      	ldr	r2, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b86      	ldr	r3, [pc, #536]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b6:	4b83      	ldr	r3, [pc, #524]	; (80022c4 <HAL_RCC_OscConfig+0x4d4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020c2:	4b80      	ldr	r3, [pc, #512]	; (80022c4 <HAL_RCC_OscConfig+0x4d4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7f      	ldr	r2, [pc, #508]	; (80022c4 <HAL_RCC_OscConfig+0x4d4>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7fe fec7 	bl	8000e60 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7fe fec3 	bl	8000e60 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b64      	cmp	r3, #100	; 0x64
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e12a      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e8:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <HAL_RCC_OscConfig+0x4d4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x31a>
 80020fc:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a6f      	ldr	r2, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	e02d      	b.n	8002166 <HAL_RCC_OscConfig+0x376>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x33c>
 8002112:	4b6b      	ldr	r3, [pc, #428]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	4a6a      	ldr	r2, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6713      	str	r3, [r2, #112]	; 0x70
 800211e:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a67      	ldr	r2, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6713      	str	r3, [r2, #112]	; 0x70
 800212a:	e01c      	b.n	8002166 <HAL_RCC_OscConfig+0x376>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x35e>
 8002134:	4b62      	ldr	r3, [pc, #392]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a61      	ldr	r2, [pc, #388]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
 8002140:	4b5f      	ldr	r3, [pc, #380]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a5e      	ldr	r2, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x376>
 800214e:	4b5c      	ldr	r3, [pc, #368]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	4a5b      	ldr	r2, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6713      	str	r3, [r2, #112]	; 0x70
 800215a:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a58      	ldr	r2, [pc, #352]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d015      	beq.n	800219a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7fe fe77 	bl	8000e60 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe fe73 	bl	8000e60 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0d8      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ee      	beq.n	8002176 <HAL_RCC_OscConfig+0x386>
 8002198:	e014      	b.n	80021c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7fe fe61 	bl	8000e60 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe fe5d 	bl	8000e60 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e0c2      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a3c      	ldr	r2, [pc, #240]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80ae 	beq.w	800233c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d06d      	beq.n	80022c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d14b      	bne.n	800228c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	4b32      	ldr	r3, [pc, #200]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fe2e 	bl	8000e60 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fe2a 	bl	8000e60 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e091      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	019b      	lsls	r3, r3, #6
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	085b      	lsrs	r3, r3, #1
 800223e:	3b01      	subs	r3, #1
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	071b      	lsls	r3, r3, #28
 8002252:	491b      	ldr	r1, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 800225e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fdfc 	bl	8000e60 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fdf8 	bl	8000e60 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e05f      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x47c>
 800228a:	e057      	b.n	800233c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 8002292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe fde2 	bl	8000e60 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe fdde 	bl	8000e60 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e045      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4b0>
 80022be:	e03d      	b.n	800233c <HAL_RCC_OscConfig+0x54c>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_RCC_OscConfig+0x558>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d030      	beq.n	8002338 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d129      	bne.n	8002338 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d122      	bne.n	8002338 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022f8:	4013      	ands	r3, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002300:	4293      	cmp	r3, r2
 8002302:	d119      	bne.n	8002338 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	085b      	lsrs	r3, r3, #1
 8002310:	3b01      	subs	r3, #1
 8002312:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d10f      	bne.n	8002338 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d107      	bne.n	8002338 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d0      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 020f 	bic.w	r2, r3, #15
 800237a:	4965      	ldr	r1, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d040      	beq.n	8002470 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d115      	bne.n	800242e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e073      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4936      	ldr	r1, [pc, #216]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002440:	f7fe fd0e 	bl	8000e60 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7fe fd0a 	bl	8000e60 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e053      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d210      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 020f 	bic.w	r2, r3, #15
 8002486:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1cc>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1d0>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1d4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fc6a 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00
 8002514:	40023800 	.word	0x40023800
 8002518:	08004ef4 	.word	0x08004ef4
 800251c:	20000000 	.word	0x20000000
 8002520:	20000004 	.word	0x20000004

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002528:	b090      	sub	sp, #64	; 0x40
 800252a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	637b      	str	r3, [r7, #52]	; 0x34
 8002530:	2300      	movs	r3, #0
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d00d      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x40>
 8002548:	2b08      	cmp	r3, #8
 800254a:	f200 80a1 	bhi.w	8002690 <HAL_RCC_GetSysClockFreq+0x16c>
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x34>
 8002552:	2b04      	cmp	r3, #4
 8002554:	d003      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x3a>
 8002556:	e09b      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800255c:	e09b      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255e:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002562:	e098      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800256e:	4b4d      	ldr	r3, [pc, #308]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d028      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	2200      	movs	r2, #0
 8002582:	623b      	str	r3, [r7, #32]
 8002584:	627a      	str	r2, [r7, #36]	; 0x24
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800258c:	2100      	movs	r1, #0
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002590:	fb03 f201 	mul.w	r2, r3, r1
 8002594:	2300      	movs	r3, #0
 8002596:	fb00 f303 	mul.w	r3, r0, r3
 800259a:	4413      	add	r3, r2
 800259c:	4a43      	ldr	r2, [pc, #268]	; (80026ac <HAL_RCC_GetSysClockFreq+0x188>)
 800259e:	fba0 1202 	umull	r1, r2, r0, r2
 80025a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025a4:	460a      	mov	r2, r1
 80025a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80025a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025aa:	4413      	add	r3, r2
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	2200      	movs	r2, #0
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	61fa      	str	r2, [r7, #28]
 80025b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025be:	f7fd fe97 	bl	80002f0 <__aeabi_uldivmod>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4613      	mov	r3, r2
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ca:	e053      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025cc:	4b35      	ldr	r3, [pc, #212]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	2200      	movs	r2, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	617a      	str	r2, [r7, #20]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025de:	f04f 0b00 	mov.w	fp, #0
 80025e2:	4652      	mov	r2, sl
 80025e4:	465b      	mov	r3, fp
 80025e6:	f04f 0000 	mov.w	r0, #0
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	0159      	lsls	r1, r3, #5
 80025f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f4:	0150      	lsls	r0, r2, #5
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	ebb2 080a 	subs.w	r8, r2, sl
 80025fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800260e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002612:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002616:	ebb2 0408 	subs.w	r4, r2, r8
 800261a:	eb63 0509 	sbc.w	r5, r3, r9
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	00eb      	lsls	r3, r5, #3
 8002628:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800262c:	00e2      	lsls	r2, r4, #3
 800262e:	4614      	mov	r4, r2
 8002630:	461d      	mov	r5, r3
 8002632:	eb14 030a 	adds.w	r3, r4, sl
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	eb45 030b 	adc.w	r3, r5, fp
 800263c:	607b      	str	r3, [r7, #4]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800264a:	4629      	mov	r1, r5
 800264c:	028b      	lsls	r3, r1, #10
 800264e:	4621      	mov	r1, r4
 8002650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002654:	4621      	mov	r1, r4
 8002656:	028a      	lsls	r2, r1, #10
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	2200      	movs	r2, #0
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	60fa      	str	r2, [r7, #12]
 8002664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002668:	f7fd fe42 	bl	80002f0 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	0c1b      	lsrs	r3, r3, #16
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	3301      	adds	r3, #1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800268e:	e002      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002692:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002698:	4618      	mov	r0, r3
 800269a:	3740      	adds	r7, #64	; 0x40
 800269c:	46bd      	mov	sp, r7
 800269e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	00f42400 	.word	0x00f42400
 80026ac:	017d7840 	.word	0x017d7840

080026b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08004f04 	.word	0x08004f04

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f4:	f7ff ffdc 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0b5b      	lsrs	r3, r3, #13
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	08004f04 	.word	0x08004f04

08002718 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d012      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002740:	4b69      	ldr	r3, [pc, #420]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a68      	ldr	r2, [pc, #416]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002746:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800274a:	6093      	str	r3, [r2, #8]
 800274c:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	4964      	ldr	r1, [pc, #400]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d017      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002772:	4b5d      	ldr	r3, [pc, #372]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	4959      	ldr	r1, [pc, #356]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002790:	d101      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002792:	2301      	movs	r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d017      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ae:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	494a      	ldr	r1, [pc, #296]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027cc:	d101      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027ea:	2301      	movs	r3, #1
 80027ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 808b 	beq.w	8002912 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	4a39      	ldr	r2, [pc, #228]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002806:	6413      	str	r3, [r2, #64]	; 0x40
 8002808:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002814:	4b35      	ldr	r3, [pc, #212]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a34      	ldr	r2, [pc, #208]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002820:	f7fe fb1e 	bl	8000e60 <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7fe fb1a 	bl	8000e60 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e38f      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800283a:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002846:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d035      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d02e      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	4a1a      	ldr	r2, [pc, #104]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800288c:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d114      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fae2 	bl	8000e60 <HAL_GetTick>
 800289c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289e:	e00a      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a0:	f7fe fade 	bl	8000e60 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e351      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0ee      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ce:	d111      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028de:	400b      	ands	r3, r1
 80028e0:	4901      	ldr	r1, [pc, #4]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
 80028e6:	e00b      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40007000 	.word	0x40007000
 80028f0:	0ffffcff 	.word	0x0ffffcff
 80028f4:	4bac      	ldr	r3, [pc, #688]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4aab      	ldr	r2, [pc, #684]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028fe:	6093      	str	r3, [r2, #8]
 8002900:	4ba9      	ldr	r3, [pc, #676]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002902:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290c:	49a6      	ldr	r1, [pc, #664]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290e:	4313      	orrs	r3, r2
 8002910:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800291e:	4ba2      	ldr	r3, [pc, #648]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002924:	4aa0      	ldr	r2, [pc, #640]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800292a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800292e:	4b9e      	ldr	r3, [pc, #632]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002930:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	499b      	ldr	r1, [pc, #620]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294c:	4b96      	ldr	r3, [pc, #600]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295a:	4993      	ldr	r1, [pc, #588]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800296e:	4b8e      	ldr	r3, [pc, #568]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002974:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800297c:	498a      	ldr	r1, [pc, #552]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002990:	4b85      	ldr	r3, [pc, #532]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002996:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299e:	4982      	ldr	r1, [pc, #520]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029b2:	4b7d      	ldr	r3, [pc, #500]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	4979      	ldr	r1, [pc, #484]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d4:	4b74      	ldr	r3, [pc, #464]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4971      	ldr	r1, [pc, #452]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f6:	4b6c      	ldr	r3, [pc, #432]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	f023 020c 	bic.w	r2, r3, #12
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a04:	4968      	ldr	r1, [pc, #416]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a18:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	4960      	ldr	r1, [pc, #384]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a48:	4957      	ldr	r1, [pc, #348]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6a:	494f      	ldr	r1, [pc, #316]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4946      	ldr	r1, [pc, #280]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002aa0:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	493e      	ldr	r1, [pc, #248]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ac2:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad0:	4935      	ldr	r1, [pc, #212]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002af2:	492d      	ldr	r1, [pc, #180]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d011      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b06:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b14:	4924      	ldr	r1, [pc, #144]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b24:	d101      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b26:	2301      	movs	r3, #1
 8002b28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b54:	4914      	ldr	r1, [pc, #80]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b78:	490b      	ldr	r1, [pc, #44]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00f      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b8c:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9c:	4902      	ldr	r1, [pc, #8]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ba4:	e002      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bb8:	4b8a      	ldr	r3, [pc, #552]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bbe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	4986      	ldr	r1, [pc, #536]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bdc:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bec:	497d      	ldr	r1, [pc, #500]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d006      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80d6 	beq.w	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c08:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a75      	ldr	r2, [pc, #468]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c14:	f7fe f924 	bl	8000e60 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c1c:	f7fe f920 	bl	8000e60 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e195      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c2e:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d021      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d11d      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c4e:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c5c:	4b61      	ldr	r3, [pc, #388]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c62:	0e1b      	lsrs	r3, r3, #24
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	019a      	lsls	r2, r3, #6
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	431a      	orrs	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	4958      	ldr	r1, [pc, #352]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d004      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d02e      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb4:	d129      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cb6:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cc4:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cca:	0f1b      	lsrs	r3, r3, #28
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	019a      	lsls	r2, r3, #6
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	071b      	lsls	r3, r3, #28
 8002cea:	493e      	ldr	r1, [pc, #248]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cf2:	4b3c      	ldr	r3, [pc, #240]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf8:	f023 021f 	bic.w	r2, r3, #31
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	3b01      	subs	r3, #1
 8002d02:	4938      	ldr	r1, [pc, #224]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01d      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d16:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1c:	0e1b      	lsrs	r3, r3, #24
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d24:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d2a:	0f1b      	lsrs	r3, r3, #28
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	019a      	lsls	r2, r3, #6
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	061b      	lsls	r3, r3, #24
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	071b      	lsls	r3, r3, #28
 8002d4a:	4926      	ldr	r1, [pc, #152]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d011      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	019a      	lsls	r2, r3, #6
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	071b      	lsls	r3, r3, #28
 8002d7a:	491a      	ldr	r1, [pc, #104]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d8e:	f7fe f867 	bl	8000e60 <HAL_GetTick>
 8002d92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d96:	f7fe f863 	bl	8000e60 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b64      	cmp	r3, #100	; 0x64
 8002da2:	d901      	bls.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0d8      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002da8:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	f040 80ce 	bne.w	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a08      	ldr	r2, [pc, #32]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc8:	f7fe f84a 	bl	8000e60 <HAL_GetTick>
 8002dcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dce:	e00b      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dd0:	f7fe f846 	bl	8000e60 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d904      	bls.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0bb      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002de8:	4b5e      	ldr	r3, [pc, #376]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002df4:	d0ec      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d02e      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d12a      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e1e:	4b51      	ldr	r3, [pc, #324]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e2c:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	0f1b      	lsrs	r3, r3, #28
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	019a      	lsls	r2, r3, #6
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	071b      	lsls	r3, r3, #28
 8002e52:	4944      	ldr	r1, [pc, #272]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e5a:	4b42      	ldr	r3, [pc, #264]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	493d      	ldr	r1, [pc, #244]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d022      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e88:	d11d      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	0e1b      	lsrs	r3, r3, #24
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e98:	4b32      	ldr	r3, [pc, #200]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9e:	0f1b      	lsrs	r3, r3, #28
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	019a      	lsls	r2, r3, #6
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	041b      	lsls	r3, r3, #16
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	071b      	lsls	r3, r3, #28
 8002ebe:	4929      	ldr	r1, [pc, #164]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d028      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	0e1b      	lsrs	r3, r3, #24
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ee0:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	0c1b      	lsrs	r3, r3, #16
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	019a      	lsls	r2, r3, #6
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	071b      	lsls	r3, r3, #28
 8002f06:	4917      	ldr	r1, [pc, #92]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	4911      	ldr	r1, [pc, #68]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fd ff96 	bl	8000e60 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f38:	f7fd ff92 	bl	8000e60 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e007      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f56:	d1ef      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800

08002f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e040      	b.n	8002ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7fd fdc6 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fc06 	bl	80037b8 <UART_SetConfig>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e022      	b.n	8002ffc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fe5e 	bl	8003c80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fee5 	bl	8003dc4 <UART_CheckIdleState>
 8002ffa:	4603      	mov	r3, r0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003018:	2b20      	cmp	r3, #32
 800301a:	d171      	bne.n	8003100 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_UART_Transmit+0x24>
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e06a      	b.n	8003102 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2221      	movs	r2, #33	; 0x21
 8003038:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800303a:	f7fd ff11 	bl	8000e60 <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	88fa      	ldrh	r2, [r7, #6]
 8003044:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003058:	d108      	bne.n	800306c <HAL_UART_Transmit+0x68>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	e003      	b.n	8003074 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003074:	e02c      	b.n	80030d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2200      	movs	r2, #0
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 feec 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e038      	b.n	8003102 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	3302      	adds	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	e007      	b.n	80030be <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	3301      	adds	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1cc      	bne.n	8003076 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2200      	movs	r2, #0
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 feb9 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e005      	b.n	8003102 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b08a      	sub	sp, #40	; 0x28
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	4613      	mov	r3, r2
 8003116:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311e:	2b20      	cmp	r3, #32
 8003120:	d132      	bne.n	8003188 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <HAL_UART_Receive_IT+0x24>
 8003128:	88fb      	ldrh	r3, [r7, #6]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e02b      	b.n	800318a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d018      	beq.n	8003178 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	e853 3f00 	ldrex	r3, [r3]
 8003152:	613b      	str	r3, [r7, #16]
   return(result);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	623b      	str	r3, [r7, #32]
 8003166:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003168:	69f9      	ldr	r1, [r7, #28]
 800316a:	6a3a      	ldr	r2, [r7, #32]
 800316c:	e841 2300 	strex	r3, r2, [r1]
 8003170:	61bb      	str	r3, [r7, #24]
   return(result);
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e6      	bne.n	8003146 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	461a      	mov	r2, r3
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 ff34 	bl	8003fec <UART_Start_Receive_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	e000      	b.n	800318a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3728      	adds	r7, #40	; 0x28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b0ba      	sub	sp, #232	; 0xe8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031be:	f640 030f 	movw	r3, #2063	; 0x80f
 80031c2:	4013      	ands	r3, r2
 80031c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d115      	bne.n	80031fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00f      	beq.n	80031fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 82ac 	beq.w	800374a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
      }
      return;
 80031fa:	e2a6      	b.n	800374a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8117 	beq.w	8003434 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003216:	4b85      	ldr	r3, [pc, #532]	; (800342c <HAL_UART_IRQHandler+0x298>)
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 810a 	beq.w	8003434 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d011      	beq.n	8003250 <HAL_UART_IRQHandler+0xbc>
 800322c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00b      	beq.n	8003250 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d011      	beq.n	8003280 <HAL_UART_IRQHandler+0xec>
 800325c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00b      	beq.n	8003280 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2202      	movs	r2, #2
 800326e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003276:	f043 0204 	orr.w	r2, r3, #4
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d011      	beq.n	80032b0 <HAL_UART_IRQHandler+0x11c>
 800328c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2204      	movs	r2, #4
 800329e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d017      	beq.n	80032ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2208      	movs	r2, #8
 80032da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	f043 0208 	orr.w	r2, r3, #8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d012      	beq.n	800331e <HAL_UART_IRQHandler+0x18a>
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800330c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8212 	beq.w	800374e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d005      	beq.n	8003376 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800336a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800336e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003372:	2b00      	cmp	r3, #0
 8003374:	d04f      	beq.n	8003416 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fefe 	bl	8004178 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d141      	bne.n	800340e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3308      	adds	r3, #8
 8003390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1d9      	bne.n	800338a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d013      	beq.n	8003406 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <HAL_UART_IRQHandler+0x29c>)
 80033e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe fb17 	bl	8001a1e <HAL_DMA_Abort_IT>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003400:	4610      	mov	r0, r2
 8003402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	e00f      	b.n	8003426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f9b6 	bl	8003778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	e00b      	b.n	8003426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9b2 	bl	8003778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003414:	e007      	b.n	8003426 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f9ae 	bl	8003778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003424:	e193      	b.n	800374e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003426:	bf00      	nop
    return;
 8003428:	e191      	b.n	800374e <HAL_UART_IRQHandler+0x5ba>
 800342a:	bf00      	nop
 800342c:	04000120 	.word	0x04000120
 8003430:	08004241 	.word	0x08004241

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003438:	2b01      	cmp	r3, #1
 800343a:	f040 814c 	bne.w	80036d6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8145 	beq.w	80036d6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800344c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 813e 	beq.w	80036d6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2210      	movs	r2, #16
 8003460:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	f040 80b6 	bne.w	80035de <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800347e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8165 	beq.w	8003752 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800348e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003492:	429a      	cmp	r2, r3
 8003494:	f080 815d 	bcs.w	8003752 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800349e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ac:	f000 8086 	beq.w	80035bc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80034da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80034e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1da      	bne.n	80034b0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3308      	adds	r3, #8
 8003500:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800350a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800350c:	f023 0301 	bic.w	r3, r3, #1
 8003510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3308      	adds	r3, #8
 800351a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800351e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003522:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003526:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e1      	bne.n	80034fa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3308      	adds	r3, #8
 8003556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800355a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800355c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003560:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e3      	bne.n	8003536 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800358a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358c:	f023 0310 	bic.w	r3, r3, #16
 8003590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800359e:	65bb      	str	r3, [r7, #88]	; 0x58
 80035a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e4      	bne.n	800357c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe f9c1 	bl	800193e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8d8 	bl	800378c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035dc:	e0b9      	b.n	8003752 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 80ab 	beq.w	8003756 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a6 	beq.w	8003756 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003612:	e853 3f00 	ldrex	r3, [r3]
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800361e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800362c:	647b      	str	r3, [r7, #68]	; 0x44
 800362e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800363a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e4      	bne.n	800360a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3308      	adds	r3, #8
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	e853 3f00 	ldrex	r3, [r3]
 800364e:	623b      	str	r3, [r7, #32]
   return(result);
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	3308      	adds	r3, #8
 8003660:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003664:	633a      	str	r2, [r7, #48]	; 0x30
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800366a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e3      	bne.n	8003640 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	60fb      	str	r3, [r7, #12]
   return(result);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f023 0310 	bic.w	r3, r3, #16
 80036a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	617b      	str	r3, [r7, #20]
   return(result);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e4      	bne.n	800368c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2202      	movs	r2, #2
 80036c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036cc:	4619      	mov	r1, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f85c 	bl	800378c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036d4:	e03f      	b.n	8003756 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00e      	beq.n	8003700 <HAL_UART_IRQHandler+0x56c>
 80036e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f853 	bl	80037a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036fe:	e02d      	b.n	800375c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800370c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01c      	beq.n	800375a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
    }
    return;
 8003728:	e017      	b.n	800375a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <HAL_UART_IRQHandler+0x5c8>
 8003736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fd92 	bl	800426c <UART_EndTransmit_IT>
    return;
 8003748:	e008      	b.n	800375c <HAL_UART_IRQHandler+0x5c8>
      return;
 800374a:	bf00      	nop
 800374c:	e006      	b.n	800375c <HAL_UART_IRQHandler+0x5c8>
    return;
 800374e:	bf00      	nop
 8003750:	e004      	b.n	800375c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003752:	bf00      	nop
 8003754:	e002      	b.n	800375c <HAL_UART_IRQHandler+0x5c8>
      return;
 8003756:	bf00      	nop
 8003758:	e000      	b.n	800375c <HAL_UART_IRQHandler+0x5c8>
    return;
 800375a:	bf00      	nop
  }

}
 800375c:	37e8      	adds	r7, #232	; 0xe8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop

08003764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4ba6      	ldr	r3, [pc, #664]	; (8003a7c <UART_SetConfig+0x2c4>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	6979      	ldr	r1, [r7, #20]
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a94      	ldr	r2, [pc, #592]	; (8003a80 <UART_SetConfig+0x2c8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d120      	bne.n	8003876 <UART_SetConfig+0xbe>
 8003834:	4b93      	ldr	r3, [pc, #588]	; (8003a84 <UART_SetConfig+0x2cc>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b03      	cmp	r3, #3
 8003840:	d816      	bhi.n	8003870 <UART_SetConfig+0xb8>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0x90>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	08003859 	.word	0x08003859
 800384c:	08003865 	.word	0x08003865
 8003850:	0800385f 	.word	0x0800385f
 8003854:	0800386b 	.word	0x0800386b
 8003858:	2301      	movs	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e150      	b.n	8003b00 <UART_SetConfig+0x348>
 800385e:	2302      	movs	r3, #2
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e14d      	b.n	8003b00 <UART_SetConfig+0x348>
 8003864:	2304      	movs	r3, #4
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e14a      	b.n	8003b00 <UART_SetConfig+0x348>
 800386a:	2308      	movs	r3, #8
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e147      	b.n	8003b00 <UART_SetConfig+0x348>
 8003870:	2310      	movs	r3, #16
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e144      	b.n	8003b00 <UART_SetConfig+0x348>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a83      	ldr	r2, [pc, #524]	; (8003a88 <UART_SetConfig+0x2d0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d132      	bne.n	80038e6 <UART_SetConfig+0x12e>
 8003880:	4b80      	ldr	r3, [pc, #512]	; (8003a84 <UART_SetConfig+0x2cc>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d828      	bhi.n	80038e0 <UART_SetConfig+0x128>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0xdc>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038c9 	.word	0x080038c9
 8003898:	080038e1 	.word	0x080038e1
 800389c:	080038e1 	.word	0x080038e1
 80038a0:	080038e1 	.word	0x080038e1
 80038a4:	080038d5 	.word	0x080038d5
 80038a8:	080038e1 	.word	0x080038e1
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	080038e1 	.word	0x080038e1
 80038b4:	080038cf 	.word	0x080038cf
 80038b8:	080038e1 	.word	0x080038e1
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	080038e1 	.word	0x080038e1
 80038c4:	080038db 	.word	0x080038db
 80038c8:	2300      	movs	r3, #0
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e118      	b.n	8003b00 <UART_SetConfig+0x348>
 80038ce:	2302      	movs	r3, #2
 80038d0:	77fb      	strb	r3, [r7, #31]
 80038d2:	e115      	b.n	8003b00 <UART_SetConfig+0x348>
 80038d4:	2304      	movs	r3, #4
 80038d6:	77fb      	strb	r3, [r7, #31]
 80038d8:	e112      	b.n	8003b00 <UART_SetConfig+0x348>
 80038da:	2308      	movs	r3, #8
 80038dc:	77fb      	strb	r3, [r7, #31]
 80038de:	e10f      	b.n	8003b00 <UART_SetConfig+0x348>
 80038e0:	2310      	movs	r3, #16
 80038e2:	77fb      	strb	r3, [r7, #31]
 80038e4:	e10c      	b.n	8003b00 <UART_SetConfig+0x348>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a68      	ldr	r2, [pc, #416]	; (8003a8c <UART_SetConfig+0x2d4>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d120      	bne.n	8003932 <UART_SetConfig+0x17a>
 80038f0:	4b64      	ldr	r3, [pc, #400]	; (8003a84 <UART_SetConfig+0x2cc>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038fa:	2b30      	cmp	r3, #48	; 0x30
 80038fc:	d013      	beq.n	8003926 <UART_SetConfig+0x16e>
 80038fe:	2b30      	cmp	r3, #48	; 0x30
 8003900:	d814      	bhi.n	800392c <UART_SetConfig+0x174>
 8003902:	2b20      	cmp	r3, #32
 8003904:	d009      	beq.n	800391a <UART_SetConfig+0x162>
 8003906:	2b20      	cmp	r3, #32
 8003908:	d810      	bhi.n	800392c <UART_SetConfig+0x174>
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <UART_SetConfig+0x15c>
 800390e:	2b10      	cmp	r3, #16
 8003910:	d006      	beq.n	8003920 <UART_SetConfig+0x168>
 8003912:	e00b      	b.n	800392c <UART_SetConfig+0x174>
 8003914:	2300      	movs	r3, #0
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e0f2      	b.n	8003b00 <UART_SetConfig+0x348>
 800391a:	2302      	movs	r3, #2
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e0ef      	b.n	8003b00 <UART_SetConfig+0x348>
 8003920:	2304      	movs	r3, #4
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e0ec      	b.n	8003b00 <UART_SetConfig+0x348>
 8003926:	2308      	movs	r3, #8
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e0e9      	b.n	8003b00 <UART_SetConfig+0x348>
 800392c:	2310      	movs	r3, #16
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e0e6      	b.n	8003b00 <UART_SetConfig+0x348>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a56      	ldr	r2, [pc, #344]	; (8003a90 <UART_SetConfig+0x2d8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d120      	bne.n	800397e <UART_SetConfig+0x1c6>
 800393c:	4b51      	ldr	r3, [pc, #324]	; (8003a84 <UART_SetConfig+0x2cc>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003946:	2bc0      	cmp	r3, #192	; 0xc0
 8003948:	d013      	beq.n	8003972 <UART_SetConfig+0x1ba>
 800394a:	2bc0      	cmp	r3, #192	; 0xc0
 800394c:	d814      	bhi.n	8003978 <UART_SetConfig+0x1c0>
 800394e:	2b80      	cmp	r3, #128	; 0x80
 8003950:	d009      	beq.n	8003966 <UART_SetConfig+0x1ae>
 8003952:	2b80      	cmp	r3, #128	; 0x80
 8003954:	d810      	bhi.n	8003978 <UART_SetConfig+0x1c0>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <UART_SetConfig+0x1a8>
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d006      	beq.n	800396c <UART_SetConfig+0x1b4>
 800395e:	e00b      	b.n	8003978 <UART_SetConfig+0x1c0>
 8003960:	2300      	movs	r3, #0
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e0cc      	b.n	8003b00 <UART_SetConfig+0x348>
 8003966:	2302      	movs	r3, #2
 8003968:	77fb      	strb	r3, [r7, #31]
 800396a:	e0c9      	b.n	8003b00 <UART_SetConfig+0x348>
 800396c:	2304      	movs	r3, #4
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e0c6      	b.n	8003b00 <UART_SetConfig+0x348>
 8003972:	2308      	movs	r3, #8
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e0c3      	b.n	8003b00 <UART_SetConfig+0x348>
 8003978:	2310      	movs	r3, #16
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e0c0      	b.n	8003b00 <UART_SetConfig+0x348>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a44      	ldr	r2, [pc, #272]	; (8003a94 <UART_SetConfig+0x2dc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d125      	bne.n	80039d4 <UART_SetConfig+0x21c>
 8003988:	4b3e      	ldr	r3, [pc, #248]	; (8003a84 <UART_SetConfig+0x2cc>)
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003996:	d017      	beq.n	80039c8 <UART_SetConfig+0x210>
 8003998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800399c:	d817      	bhi.n	80039ce <UART_SetConfig+0x216>
 800399e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a2:	d00b      	beq.n	80039bc <UART_SetConfig+0x204>
 80039a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a8:	d811      	bhi.n	80039ce <UART_SetConfig+0x216>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <UART_SetConfig+0x1fe>
 80039ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b2:	d006      	beq.n	80039c2 <UART_SetConfig+0x20a>
 80039b4:	e00b      	b.n	80039ce <UART_SetConfig+0x216>
 80039b6:	2300      	movs	r3, #0
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e0a1      	b.n	8003b00 <UART_SetConfig+0x348>
 80039bc:	2302      	movs	r3, #2
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e09e      	b.n	8003b00 <UART_SetConfig+0x348>
 80039c2:	2304      	movs	r3, #4
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e09b      	b.n	8003b00 <UART_SetConfig+0x348>
 80039c8:	2308      	movs	r3, #8
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e098      	b.n	8003b00 <UART_SetConfig+0x348>
 80039ce:	2310      	movs	r3, #16
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e095      	b.n	8003b00 <UART_SetConfig+0x348>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2f      	ldr	r2, [pc, #188]	; (8003a98 <UART_SetConfig+0x2e0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d125      	bne.n	8003a2a <UART_SetConfig+0x272>
 80039de:	4b29      	ldr	r3, [pc, #164]	; (8003a84 <UART_SetConfig+0x2cc>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039ec:	d017      	beq.n	8003a1e <UART_SetConfig+0x266>
 80039ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039f2:	d817      	bhi.n	8003a24 <UART_SetConfig+0x26c>
 80039f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f8:	d00b      	beq.n	8003a12 <UART_SetConfig+0x25a>
 80039fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fe:	d811      	bhi.n	8003a24 <UART_SetConfig+0x26c>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <UART_SetConfig+0x254>
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a08:	d006      	beq.n	8003a18 <UART_SetConfig+0x260>
 8003a0a:	e00b      	b.n	8003a24 <UART_SetConfig+0x26c>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e076      	b.n	8003b00 <UART_SetConfig+0x348>
 8003a12:	2302      	movs	r3, #2
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e073      	b.n	8003b00 <UART_SetConfig+0x348>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e070      	b.n	8003b00 <UART_SetConfig+0x348>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e06d      	b.n	8003b00 <UART_SetConfig+0x348>
 8003a24:	2310      	movs	r3, #16
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e06a      	b.n	8003b00 <UART_SetConfig+0x348>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <UART_SetConfig+0x2e4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d138      	bne.n	8003aa6 <UART_SetConfig+0x2ee>
 8003a34:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <UART_SetConfig+0x2cc>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a42:	d017      	beq.n	8003a74 <UART_SetConfig+0x2bc>
 8003a44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a48:	d82a      	bhi.n	8003aa0 <UART_SetConfig+0x2e8>
 8003a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4e:	d00b      	beq.n	8003a68 <UART_SetConfig+0x2b0>
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d824      	bhi.n	8003aa0 <UART_SetConfig+0x2e8>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <UART_SetConfig+0x2aa>
 8003a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5e:	d006      	beq.n	8003a6e <UART_SetConfig+0x2b6>
 8003a60:	e01e      	b.n	8003aa0 <UART_SetConfig+0x2e8>
 8003a62:	2300      	movs	r3, #0
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e04b      	b.n	8003b00 <UART_SetConfig+0x348>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e048      	b.n	8003b00 <UART_SetConfig+0x348>
 8003a6e:	2304      	movs	r3, #4
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e045      	b.n	8003b00 <UART_SetConfig+0x348>
 8003a74:	2308      	movs	r3, #8
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e042      	b.n	8003b00 <UART_SetConfig+0x348>
 8003a7a:	bf00      	nop
 8003a7c:	efff69f3 	.word	0xefff69f3
 8003a80:	40011000 	.word	0x40011000
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40004400 	.word	0x40004400
 8003a8c:	40004800 	.word	0x40004800
 8003a90:	40004c00 	.word	0x40004c00
 8003a94:	40005000 	.word	0x40005000
 8003a98:	40011400 	.word	0x40011400
 8003a9c:	40007800 	.word	0x40007800
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e02c      	b.n	8003b00 <UART_SetConfig+0x348>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a72      	ldr	r2, [pc, #456]	; (8003c74 <UART_SetConfig+0x4bc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d125      	bne.n	8003afc <UART_SetConfig+0x344>
 8003ab0:	4b71      	ldr	r3, [pc, #452]	; (8003c78 <UART_SetConfig+0x4c0>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003aba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003abe:	d017      	beq.n	8003af0 <UART_SetConfig+0x338>
 8003ac0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ac4:	d817      	bhi.n	8003af6 <UART_SetConfig+0x33e>
 8003ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aca:	d00b      	beq.n	8003ae4 <UART_SetConfig+0x32c>
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad0:	d811      	bhi.n	8003af6 <UART_SetConfig+0x33e>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <UART_SetConfig+0x326>
 8003ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ada:	d006      	beq.n	8003aea <UART_SetConfig+0x332>
 8003adc:	e00b      	b.n	8003af6 <UART_SetConfig+0x33e>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e00d      	b.n	8003b00 <UART_SetConfig+0x348>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e00a      	b.n	8003b00 <UART_SetConfig+0x348>
 8003aea:	2304      	movs	r3, #4
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e007      	b.n	8003b00 <UART_SetConfig+0x348>
 8003af0:	2308      	movs	r3, #8
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e004      	b.n	8003b00 <UART_SetConfig+0x348>
 8003af6:	2310      	movs	r3, #16
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e001      	b.n	8003b00 <UART_SetConfig+0x348>
 8003afc:	2310      	movs	r3, #16
 8003afe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b08:	d15b      	bne.n	8003bc2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b0a:	7ffb      	ldrb	r3, [r7, #31]
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d828      	bhi.n	8003b62 <UART_SetConfig+0x3aa>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UART_SetConfig+0x360>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003b45 	.word	0x08003b45
 8003b20:	08003b4d 	.word	0x08003b4d
 8003b24:	08003b63 	.word	0x08003b63
 8003b28:	08003b53 	.word	0x08003b53
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b63 	.word	0x08003b63
 8003b34:	08003b63 	.word	0x08003b63
 8003b38:	08003b5b 	.word	0x08003b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f7fe fdc4 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003b40:	61b8      	str	r0, [r7, #24]
        break;
 8003b42:	e013      	b.n	8003b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f7fe fdd4 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8003b48:	61b8      	str	r0, [r7, #24]
        break;
 8003b4a:	e00f      	b.n	8003b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <UART_SetConfig+0x4c4>)
 8003b4e:	61bb      	str	r3, [r7, #24]
        break;
 8003b50:	e00c      	b.n	8003b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe fce7 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 8003b56:	61b8      	str	r0, [r7, #24]
        break;
 8003b58:	e008      	b.n	8003b6c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	61bb      	str	r3, [r7, #24]
        break;
 8003b60:	e004      	b.n	8003b6c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	77bb      	strb	r3, [r7, #30]
        break;
 8003b6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d074      	beq.n	8003c5c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	005a      	lsls	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	441a      	add	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	d916      	bls.n	8003bbc <UART_SetConfig+0x404>
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b94:	d212      	bcs.n	8003bbc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f023 030f 	bic.w	r3, r3, #15
 8003b9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	89fb      	ldrh	r3, [r7, #14]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	89fa      	ldrh	r2, [r7, #14]
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	e04f      	b.n	8003c5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	77bb      	strb	r3, [r7, #30]
 8003bc0:	e04c      	b.n	8003c5c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bc2:	7ffb      	ldrb	r3, [r7, #31]
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d828      	bhi.n	8003c1a <UART_SetConfig+0x462>
 8003bc8:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <UART_SetConfig+0x418>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003c05 	.word	0x08003c05
 8003bdc:	08003c1b 	.word	0x08003c1b
 8003be0:	08003c0b 	.word	0x08003c0b
 8003be4:	08003c1b 	.word	0x08003c1b
 8003be8:	08003c1b 	.word	0x08003c1b
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	08003c13 	.word	0x08003c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f7fe fd68 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	61b8      	str	r0, [r7, #24]
        break;
 8003bfa:	e013      	b.n	8003c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bfc:	f7fe fd78 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8003c00:	61b8      	str	r0, [r7, #24]
        break;
 8003c02:	e00f      	b.n	8003c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <UART_SetConfig+0x4c4>)
 8003c06:	61bb      	str	r3, [r7, #24]
        break;
 8003c08:	e00c      	b.n	8003c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0a:	f7fe fc8b 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 8003c0e:	61b8      	str	r0, [r7, #24]
        break;
 8003c10:	e008      	b.n	8003c24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c16:	61bb      	str	r3, [r7, #24]
        break;
 8003c18:	e004      	b.n	8003c24 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	77bb      	strb	r3, [r7, #30]
        break;
 8003c22:	bf00      	nop
    }

    if (pclk != 0U)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d018      	beq.n	8003c5c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	085a      	lsrs	r2, r3, #1
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	441a      	add	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b0f      	cmp	r3, #15
 8003c42:	d909      	bls.n	8003c58 <UART_SetConfig+0x4a0>
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4a:	d205      	bcs.n	8003c58 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	e001      	b.n	8003c5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c68:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40007c00 	.word	0x40007c00
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	00f42400 	.word	0x00f42400

08003c80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01a      	beq.n	8003d96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7e:	d10a      	bne.n	8003d96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
  }
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dd4:	f7fd f844 	bl	8000e60 <HAL_GetTick>
 8003dd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d10e      	bne.n	8003e06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f831 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e027      	b.n	8003e56 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d10e      	bne.n	8003e32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f81b 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e011      	b.n	8003e56 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b09c      	sub	sp, #112	; 0x70
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6e:	e0a7      	b.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	f000 80a3 	beq.w	8003fc0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7fc fff1 	bl	8000e60 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d302      	bcc.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d13f      	bne.n	8003f10 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003eb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e6      	bne.n	8003e90 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ee2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e068      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d050      	beq.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2c:	d148      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f36:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
 8003f58:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e6      	bne.n	8003f38 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	613b      	str	r3, [r7, #16]
   return(result);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3308      	adds	r3, #8
 8003f88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f8a:	623a      	str	r2, [r7, #32]
 8003f8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	69f9      	ldr	r1, [r7, #28]
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e5      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e010      	b.n	8003fe2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	f43f af48 	beq.w	8003e70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3770      	adds	r7, #112	; 0x70
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b097      	sub	sp, #92	; 0x5c
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	d10e      	bne.n	800403e <UART_Start_Receive_IT+0x52>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d105      	bne.n	8004034 <UART_Start_Receive_IT+0x48>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800402e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004032:	e02d      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	22ff      	movs	r2, #255	; 0xff
 8004038:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800403c:	e028      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <UART_Start_Receive_IT+0x76>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <UART_Start_Receive_IT+0x6c>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	22ff      	movs	r2, #255	; 0xff
 8004052:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004056:	e01b      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	227f      	movs	r2, #127	; 0x7f
 800405c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004060:	e016      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406a:	d10d      	bne.n	8004088 <UART_Start_Receive_IT+0x9c>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d104      	bne.n	800407e <UART_Start_Receive_IT+0x92>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	227f      	movs	r2, #127	; 0x7f
 8004078:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800407c:	e008      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	223f      	movs	r2, #63	; 0x3f
 8004082:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004086:	e003      	b.n	8004090 <UART_Start_Receive_IT+0xa4>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2222      	movs	r2, #34	; 0x22
 800409c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	657b      	str	r3, [r7, #84]	; 0x54
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80040c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d107      	bne.n	80040ee <UART_Start_Receive_IT+0x102>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d103      	bne.n	80040ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a21      	ldr	r2, [pc, #132]	; (8004170 <UART_Start_Receive_IT+0x184>)
 80040ea:	669a      	str	r2, [r3, #104]	; 0x68
 80040ec:	e002      	b.n	80040f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a20      	ldr	r2, [pc, #128]	; (8004174 <UART_Start_Receive_IT+0x188>)
 80040f2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d019      	beq.n	8004130 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004110:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411a:	637b      	str	r3, [r7, #52]	; 0x34
 800411c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e6      	bne.n	80040fc <UART_Start_Receive_IT+0x110>
 800412e:	e018      	b.n	8004162 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	613b      	str	r3, [r7, #16]
   return(result);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f043 0320 	orr.w	r3, r3, #32
 8004144:	653b      	str	r3, [r7, #80]	; 0x50
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	69f9      	ldr	r1, [r7, #28]
 8004154:	6a3a      	ldr	r2, [r7, #32]
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	61bb      	str	r3, [r7, #24]
   return(result);
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e6      	bne.n	8004130 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	375c      	adds	r7, #92	; 0x5c
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	08004427 	.word	0x08004427
 8004174:	080042c1 	.word	0x080042c1

08004178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b095      	sub	sp, #84	; 0x54
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419e:	643b      	str	r3, [r7, #64]	; 0x40
 80041a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3308      	adds	r3, #8
 80041b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e5      	bne.n	80041b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d118      	bne.n	8004220 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f023 0310 	bic.w	r3, r3, #16
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6979      	ldr	r1, [r7, #20]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	613b      	str	r3, [r7, #16]
   return(result);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e6      	bne.n	80041ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004234:	bf00      	nop
 8004236:	3754      	adds	r7, #84	; 0x54
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff fa8a 	bl	8003778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	60bb      	str	r3, [r7, #8]
   return(result);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6979      	ldr	r1, [r7, #20]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	613b      	str	r3, [r7, #16]
   return(result);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e6      	bne.n	8004274 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fa56 	bl	8003764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042b8:	bf00      	nop
 80042ba:	3720      	adds	r7, #32
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b096      	sub	sp, #88	; 0x58
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d8:	2b22      	cmp	r3, #34	; 0x22
 80042da:	f040 8098 	bne.w	800440e <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042e8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80042ec:	b2d9      	uxtb	r1, r3
 80042ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	400a      	ands	r2, r1
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d17b      	bne.n	800441e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800433a:	653b      	str	r3, [r7, #80]	; 0x50
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004344:	647b      	str	r3, [r7, #68]	; 0x44
 8004346:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004348:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800434a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800434c:	e841 2300 	strex	r3, r2, [r1]
 8004350:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e6      	bne.n	8004326 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3308      	adds	r3, #8
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	623b      	str	r3, [r7, #32]
   return(result);
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3308      	adds	r3, #8
 8004376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004378:	633a      	str	r2, [r7, #48]	; 0x30
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800437e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d12e      	bne.n	8004406 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	69b9      	ldr	r1, [r7, #24]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	617b      	str	r3, [r7, #20]
   return(result);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e6      	bne.n	80043ae <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b10      	cmp	r3, #16
 80043ec:	d103      	bne.n	80043f6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2210      	movs	r2, #16
 80043f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff f9c4 	bl	800378c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004404:	e00b      	b.n	800441e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fc faf8 	bl	80009fc <HAL_UART_RxCpltCallback>
}
 800440c:	e007      	b.n	800441e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699a      	ldr	r2, [r3, #24]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0208 	orr.w	r2, r2, #8
 800441c:	619a      	str	r2, [r3, #24]
}
 800441e:	bf00      	nop
 8004420:	3758      	adds	r7, #88	; 0x58
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b096      	sub	sp, #88	; 0x58
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004434:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800443e:	2b22      	cmp	r3, #34	; 0x22
 8004440:	f040 8098 	bne.w	8004574 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004454:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004458:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800445c:	4013      	ands	r3, r2
 800445e:	b29a      	uxth	r2, r3
 8004460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004462:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	1c9a      	adds	r2, r3, #2
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d17b      	bne.n	8004584 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004494:	e853 3f00 	ldrex	r3, [r3]
 8004498:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044aa:	643b      	str	r3, [r7, #64]	; 0x40
 80044ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b2:	e841 2300 	strex	r3, r2, [r1]
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1e6      	bne.n	800448c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3308      	adds	r3, #8
 80044c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3308      	adds	r3, #8
 80044dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e5      	bne.n	80044be <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450a:	2b01      	cmp	r3, #1
 800450c:	d12e      	bne.n	800456c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	60bb      	str	r3, [r7, #8]
   return(result);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f023 0310 	bic.w	r3, r3, #16
 8004528:	647b      	str	r3, [r7, #68]	; 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004536:	6979      	ldr	r1, [r7, #20]
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	e841 2300 	strex	r3, r2, [r1]
 800453e:	613b      	str	r3, [r7, #16]
   return(result);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1e6      	bne.n	8004514 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b10      	cmp	r3, #16
 8004552:	d103      	bne.n	800455c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2210      	movs	r2, #16
 800455a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004562:	4619      	mov	r1, r3
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff f911 	bl	800378c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800456a:	e00b      	b.n	8004584 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7fc fa45 	bl	80009fc <HAL_UART_RxCpltCallback>
}
 8004572:	e007      	b.n	8004584 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0208 	orr.w	r2, r2, #8
 8004582:	619a      	str	r2, [r3, #24]
}
 8004584:	bf00      	nop
 8004586:	3758      	adds	r7, #88	; 0x58
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <siprintf>:
 800458c:	b40e      	push	{r1, r2, r3}
 800458e:	b500      	push	{lr}
 8004590:	b09c      	sub	sp, #112	; 0x70
 8004592:	ab1d      	add	r3, sp, #116	; 0x74
 8004594:	9002      	str	r0, [sp, #8]
 8004596:	9006      	str	r0, [sp, #24]
 8004598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800459c:	4809      	ldr	r0, [pc, #36]	; (80045c4 <siprintf+0x38>)
 800459e:	9107      	str	r1, [sp, #28]
 80045a0:	9104      	str	r1, [sp, #16]
 80045a2:	4909      	ldr	r1, [pc, #36]	; (80045c8 <siprintf+0x3c>)
 80045a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a8:	9105      	str	r1, [sp, #20]
 80045aa:	6800      	ldr	r0, [r0, #0]
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	a902      	add	r1, sp, #8
 80045b0:	f000 f992 	bl	80048d8 <_svfiprintf_r>
 80045b4:	9b02      	ldr	r3, [sp, #8]
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	b01c      	add	sp, #112	; 0x70
 80045bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80045c0:	b003      	add	sp, #12
 80045c2:	4770      	bx	lr
 80045c4:	20000058 	.word	0x20000058
 80045c8:	ffff0208 	.word	0xffff0208

080045cc <memset>:
 80045cc:	4402      	add	r2, r0
 80045ce:	4603      	mov	r3, r0
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d100      	bne.n	80045d6 <memset+0xa>
 80045d4:	4770      	bx	lr
 80045d6:	f803 1b01 	strb.w	r1, [r3], #1
 80045da:	e7f9      	b.n	80045d0 <memset+0x4>

080045dc <__errno>:
 80045dc:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <__errno+0x8>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000058 	.word	0x20000058

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4d0d      	ldr	r5, [pc, #52]	; (8004620 <__libc_init_array+0x38>)
 80045ec:	4c0d      	ldr	r4, [pc, #52]	; (8004624 <__libc_init_array+0x3c>)
 80045ee:	1b64      	subs	r4, r4, r5
 80045f0:	10a4      	asrs	r4, r4, #2
 80045f2:	2600      	movs	r6, #0
 80045f4:	42a6      	cmp	r6, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	4d0b      	ldr	r5, [pc, #44]	; (8004628 <__libc_init_array+0x40>)
 80045fa:	4c0c      	ldr	r4, [pc, #48]	; (800462c <__libc_init_array+0x44>)
 80045fc:	f000 fc6a 	bl	8004ed4 <_init>
 8004600:	1b64      	subs	r4, r4, r5
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	2600      	movs	r6, #0
 8004606:	42a6      	cmp	r6, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004610:	4798      	blx	r3
 8004612:	3601      	adds	r6, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f855 3b04 	ldr.w	r3, [r5], #4
 800461a:	4798      	blx	r3
 800461c:	3601      	adds	r6, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	08004f48 	.word	0x08004f48
 8004624:	08004f48 	.word	0x08004f48
 8004628:	08004f48 	.word	0x08004f48
 800462c:	08004f4c 	.word	0x08004f4c

08004630 <__retarget_lock_acquire_recursive>:
 8004630:	4770      	bx	lr

08004632 <__retarget_lock_release_recursive>:
 8004632:	4770      	bx	lr

08004634 <_free_r>:
 8004634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004636:	2900      	cmp	r1, #0
 8004638:	d044      	beq.n	80046c4 <_free_r+0x90>
 800463a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800463e:	9001      	str	r0, [sp, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f1a1 0404 	sub.w	r4, r1, #4
 8004646:	bfb8      	it	lt
 8004648:	18e4      	addlt	r4, r4, r3
 800464a:	f000 f8df 	bl	800480c <__malloc_lock>
 800464e:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <_free_r+0x94>)
 8004650:	9801      	ldr	r0, [sp, #4]
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	b933      	cbnz	r3, 8004664 <_free_r+0x30>
 8004656:	6063      	str	r3, [r4, #4]
 8004658:	6014      	str	r4, [r2, #0]
 800465a:	b003      	add	sp, #12
 800465c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004660:	f000 b8da 	b.w	8004818 <__malloc_unlock>
 8004664:	42a3      	cmp	r3, r4
 8004666:	d908      	bls.n	800467a <_free_r+0x46>
 8004668:	6825      	ldr	r5, [r4, #0]
 800466a:	1961      	adds	r1, r4, r5
 800466c:	428b      	cmp	r3, r1
 800466e:	bf01      	itttt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	1949      	addeq	r1, r1, r5
 8004676:	6021      	streq	r1, [r4, #0]
 8004678:	e7ed      	b.n	8004656 <_free_r+0x22>
 800467a:	461a      	mov	r2, r3
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	b10b      	cbz	r3, 8004684 <_free_r+0x50>
 8004680:	42a3      	cmp	r3, r4
 8004682:	d9fa      	bls.n	800467a <_free_r+0x46>
 8004684:	6811      	ldr	r1, [r2, #0]
 8004686:	1855      	adds	r5, r2, r1
 8004688:	42a5      	cmp	r5, r4
 800468a:	d10b      	bne.n	80046a4 <_free_r+0x70>
 800468c:	6824      	ldr	r4, [r4, #0]
 800468e:	4421      	add	r1, r4
 8004690:	1854      	adds	r4, r2, r1
 8004692:	42a3      	cmp	r3, r4
 8004694:	6011      	str	r1, [r2, #0]
 8004696:	d1e0      	bne.n	800465a <_free_r+0x26>
 8004698:	681c      	ldr	r4, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	6053      	str	r3, [r2, #4]
 800469e:	440c      	add	r4, r1
 80046a0:	6014      	str	r4, [r2, #0]
 80046a2:	e7da      	b.n	800465a <_free_r+0x26>
 80046a4:	d902      	bls.n	80046ac <_free_r+0x78>
 80046a6:	230c      	movs	r3, #12
 80046a8:	6003      	str	r3, [r0, #0]
 80046aa:	e7d6      	b.n	800465a <_free_r+0x26>
 80046ac:	6825      	ldr	r5, [r4, #0]
 80046ae:	1961      	adds	r1, r4, r5
 80046b0:	428b      	cmp	r3, r1
 80046b2:	bf04      	itt	eq
 80046b4:	6819      	ldreq	r1, [r3, #0]
 80046b6:	685b      	ldreq	r3, [r3, #4]
 80046b8:	6063      	str	r3, [r4, #4]
 80046ba:	bf04      	itt	eq
 80046bc:	1949      	addeq	r1, r1, r5
 80046be:	6021      	streq	r1, [r4, #0]
 80046c0:	6054      	str	r4, [r2, #4]
 80046c2:	e7ca      	b.n	800465a <_free_r+0x26>
 80046c4:	b003      	add	sp, #12
 80046c6:	bd30      	pop	{r4, r5, pc}
 80046c8:	2000033c 	.word	0x2000033c

080046cc <sbrk_aligned>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4e0e      	ldr	r6, [pc, #56]	; (8004708 <sbrk_aligned+0x3c>)
 80046d0:	460c      	mov	r4, r1
 80046d2:	6831      	ldr	r1, [r6, #0]
 80046d4:	4605      	mov	r5, r0
 80046d6:	b911      	cbnz	r1, 80046de <sbrk_aligned+0x12>
 80046d8:	f000 fba6 	bl	8004e28 <_sbrk_r>
 80046dc:	6030      	str	r0, [r6, #0]
 80046de:	4621      	mov	r1, r4
 80046e0:	4628      	mov	r0, r5
 80046e2:	f000 fba1 	bl	8004e28 <_sbrk_r>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	d00a      	beq.n	8004700 <sbrk_aligned+0x34>
 80046ea:	1cc4      	adds	r4, r0, #3
 80046ec:	f024 0403 	bic.w	r4, r4, #3
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d007      	beq.n	8004704 <sbrk_aligned+0x38>
 80046f4:	1a21      	subs	r1, r4, r0
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 fb96 	bl	8004e28 <_sbrk_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d101      	bne.n	8004704 <sbrk_aligned+0x38>
 8004700:	f04f 34ff 	mov.w	r4, #4294967295
 8004704:	4620      	mov	r0, r4
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	20000340 	.word	0x20000340

0800470c <_malloc_r>:
 800470c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004710:	1ccd      	adds	r5, r1, #3
 8004712:	f025 0503 	bic.w	r5, r5, #3
 8004716:	3508      	adds	r5, #8
 8004718:	2d0c      	cmp	r5, #12
 800471a:	bf38      	it	cc
 800471c:	250c      	movcc	r5, #12
 800471e:	2d00      	cmp	r5, #0
 8004720:	4607      	mov	r7, r0
 8004722:	db01      	blt.n	8004728 <_malloc_r+0x1c>
 8004724:	42a9      	cmp	r1, r5
 8004726:	d905      	bls.n	8004734 <_malloc_r+0x28>
 8004728:	230c      	movs	r3, #12
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	2600      	movs	r6, #0
 800472e:	4630      	mov	r0, r6
 8004730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004734:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004808 <_malloc_r+0xfc>
 8004738:	f000 f868 	bl	800480c <__malloc_lock>
 800473c:	f8d8 3000 	ldr.w	r3, [r8]
 8004740:	461c      	mov	r4, r3
 8004742:	bb5c      	cbnz	r4, 800479c <_malloc_r+0x90>
 8004744:	4629      	mov	r1, r5
 8004746:	4638      	mov	r0, r7
 8004748:	f7ff ffc0 	bl	80046cc <sbrk_aligned>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	4604      	mov	r4, r0
 8004750:	d155      	bne.n	80047fe <_malloc_r+0xf2>
 8004752:	f8d8 4000 	ldr.w	r4, [r8]
 8004756:	4626      	mov	r6, r4
 8004758:	2e00      	cmp	r6, #0
 800475a:	d145      	bne.n	80047e8 <_malloc_r+0xdc>
 800475c:	2c00      	cmp	r4, #0
 800475e:	d048      	beq.n	80047f2 <_malloc_r+0xe6>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	4631      	mov	r1, r6
 8004764:	4638      	mov	r0, r7
 8004766:	eb04 0903 	add.w	r9, r4, r3
 800476a:	f000 fb5d 	bl	8004e28 <_sbrk_r>
 800476e:	4581      	cmp	r9, r0
 8004770:	d13f      	bne.n	80047f2 <_malloc_r+0xe6>
 8004772:	6821      	ldr	r1, [r4, #0]
 8004774:	1a6d      	subs	r5, r5, r1
 8004776:	4629      	mov	r1, r5
 8004778:	4638      	mov	r0, r7
 800477a:	f7ff ffa7 	bl	80046cc <sbrk_aligned>
 800477e:	3001      	adds	r0, #1
 8004780:	d037      	beq.n	80047f2 <_malloc_r+0xe6>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	442b      	add	r3, r5
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	f8d8 3000 	ldr.w	r3, [r8]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d038      	beq.n	8004802 <_malloc_r+0xf6>
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	42a2      	cmp	r2, r4
 8004794:	d12b      	bne.n	80047ee <_malloc_r+0xe2>
 8004796:	2200      	movs	r2, #0
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	e00f      	b.n	80047bc <_malloc_r+0xb0>
 800479c:	6822      	ldr	r2, [r4, #0]
 800479e:	1b52      	subs	r2, r2, r5
 80047a0:	d41f      	bmi.n	80047e2 <_malloc_r+0xd6>
 80047a2:	2a0b      	cmp	r2, #11
 80047a4:	d917      	bls.n	80047d6 <_malloc_r+0xca>
 80047a6:	1961      	adds	r1, r4, r5
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	6025      	str	r5, [r4, #0]
 80047ac:	bf18      	it	ne
 80047ae:	6059      	strne	r1, [r3, #4]
 80047b0:	6863      	ldr	r3, [r4, #4]
 80047b2:	bf08      	it	eq
 80047b4:	f8c8 1000 	streq.w	r1, [r8]
 80047b8:	5162      	str	r2, [r4, r5]
 80047ba:	604b      	str	r3, [r1, #4]
 80047bc:	4638      	mov	r0, r7
 80047be:	f104 060b 	add.w	r6, r4, #11
 80047c2:	f000 f829 	bl	8004818 <__malloc_unlock>
 80047c6:	f026 0607 	bic.w	r6, r6, #7
 80047ca:	1d23      	adds	r3, r4, #4
 80047cc:	1af2      	subs	r2, r6, r3
 80047ce:	d0ae      	beq.n	800472e <_malloc_r+0x22>
 80047d0:	1b9b      	subs	r3, r3, r6
 80047d2:	50a3      	str	r3, [r4, r2]
 80047d4:	e7ab      	b.n	800472e <_malloc_r+0x22>
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	6862      	ldr	r2, [r4, #4]
 80047da:	d1dd      	bne.n	8004798 <_malloc_r+0x8c>
 80047dc:	f8c8 2000 	str.w	r2, [r8]
 80047e0:	e7ec      	b.n	80047bc <_malloc_r+0xb0>
 80047e2:	4623      	mov	r3, r4
 80047e4:	6864      	ldr	r4, [r4, #4]
 80047e6:	e7ac      	b.n	8004742 <_malloc_r+0x36>
 80047e8:	4634      	mov	r4, r6
 80047ea:	6876      	ldr	r6, [r6, #4]
 80047ec:	e7b4      	b.n	8004758 <_malloc_r+0x4c>
 80047ee:	4613      	mov	r3, r2
 80047f0:	e7cc      	b.n	800478c <_malloc_r+0x80>
 80047f2:	230c      	movs	r3, #12
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	4638      	mov	r0, r7
 80047f8:	f000 f80e 	bl	8004818 <__malloc_unlock>
 80047fc:	e797      	b.n	800472e <_malloc_r+0x22>
 80047fe:	6025      	str	r5, [r4, #0]
 8004800:	e7dc      	b.n	80047bc <_malloc_r+0xb0>
 8004802:	605b      	str	r3, [r3, #4]
 8004804:	deff      	udf	#255	; 0xff
 8004806:	bf00      	nop
 8004808:	2000033c 	.word	0x2000033c

0800480c <__malloc_lock>:
 800480c:	4801      	ldr	r0, [pc, #4]	; (8004814 <__malloc_lock+0x8>)
 800480e:	f7ff bf0f 	b.w	8004630 <__retarget_lock_acquire_recursive>
 8004812:	bf00      	nop
 8004814:	20000338 	.word	0x20000338

08004818 <__malloc_unlock>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__malloc_unlock+0x8>)
 800481a:	f7ff bf0a 	b.w	8004632 <__retarget_lock_release_recursive>
 800481e:	bf00      	nop
 8004820:	20000338 	.word	0x20000338

08004824 <__ssputs_r>:
 8004824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004828:	688e      	ldr	r6, [r1, #8]
 800482a:	461f      	mov	r7, r3
 800482c:	42be      	cmp	r6, r7
 800482e:	680b      	ldr	r3, [r1, #0]
 8004830:	4682      	mov	sl, r0
 8004832:	460c      	mov	r4, r1
 8004834:	4690      	mov	r8, r2
 8004836:	d82c      	bhi.n	8004892 <__ssputs_r+0x6e>
 8004838:	898a      	ldrh	r2, [r1, #12]
 800483a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800483e:	d026      	beq.n	800488e <__ssputs_r+0x6a>
 8004840:	6965      	ldr	r5, [r4, #20]
 8004842:	6909      	ldr	r1, [r1, #16]
 8004844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004848:	eba3 0901 	sub.w	r9, r3, r1
 800484c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004850:	1c7b      	adds	r3, r7, #1
 8004852:	444b      	add	r3, r9
 8004854:	106d      	asrs	r5, r5, #1
 8004856:	429d      	cmp	r5, r3
 8004858:	bf38      	it	cc
 800485a:	461d      	movcc	r5, r3
 800485c:	0553      	lsls	r3, r2, #21
 800485e:	d527      	bpl.n	80048b0 <__ssputs_r+0x8c>
 8004860:	4629      	mov	r1, r5
 8004862:	f7ff ff53 	bl	800470c <_malloc_r>
 8004866:	4606      	mov	r6, r0
 8004868:	b360      	cbz	r0, 80048c4 <__ssputs_r+0xa0>
 800486a:	6921      	ldr	r1, [r4, #16]
 800486c:	464a      	mov	r2, r9
 800486e:	f000 faeb 	bl	8004e48 <memcpy>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	81a3      	strh	r3, [r4, #12]
 800487e:	6126      	str	r6, [r4, #16]
 8004880:	6165      	str	r5, [r4, #20]
 8004882:	444e      	add	r6, r9
 8004884:	eba5 0509 	sub.w	r5, r5, r9
 8004888:	6026      	str	r6, [r4, #0]
 800488a:	60a5      	str	r5, [r4, #8]
 800488c:	463e      	mov	r6, r7
 800488e:	42be      	cmp	r6, r7
 8004890:	d900      	bls.n	8004894 <__ssputs_r+0x70>
 8004892:	463e      	mov	r6, r7
 8004894:	6820      	ldr	r0, [r4, #0]
 8004896:	4632      	mov	r2, r6
 8004898:	4641      	mov	r1, r8
 800489a:	f000 faab 	bl	8004df4 <memmove>
 800489e:	68a3      	ldr	r3, [r4, #8]
 80048a0:	1b9b      	subs	r3, r3, r6
 80048a2:	60a3      	str	r3, [r4, #8]
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	4433      	add	r3, r6
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	2000      	movs	r0, #0
 80048ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b0:	462a      	mov	r2, r5
 80048b2:	f000 fad7 	bl	8004e64 <_realloc_r>
 80048b6:	4606      	mov	r6, r0
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d1e0      	bne.n	800487e <__ssputs_r+0x5a>
 80048bc:	6921      	ldr	r1, [r4, #16]
 80048be:	4650      	mov	r0, sl
 80048c0:	f7ff feb8 	bl	8004634 <_free_r>
 80048c4:	230c      	movs	r3, #12
 80048c6:	f8ca 3000 	str.w	r3, [sl]
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048d0:	81a3      	strh	r3, [r4, #12]
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295
 80048d6:	e7e9      	b.n	80048ac <__ssputs_r+0x88>

080048d8 <_svfiprintf_r>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	4698      	mov	r8, r3
 80048de:	898b      	ldrh	r3, [r1, #12]
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	b09d      	sub	sp, #116	; 0x74
 80048e4:	4607      	mov	r7, r0
 80048e6:	460d      	mov	r5, r1
 80048e8:	4614      	mov	r4, r2
 80048ea:	d50e      	bpl.n	800490a <_svfiprintf_r+0x32>
 80048ec:	690b      	ldr	r3, [r1, #16]
 80048ee:	b963      	cbnz	r3, 800490a <_svfiprintf_r+0x32>
 80048f0:	2140      	movs	r1, #64	; 0x40
 80048f2:	f7ff ff0b 	bl	800470c <_malloc_r>
 80048f6:	6028      	str	r0, [r5, #0]
 80048f8:	6128      	str	r0, [r5, #16]
 80048fa:	b920      	cbnz	r0, 8004906 <_svfiprintf_r+0x2e>
 80048fc:	230c      	movs	r3, #12
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	e0d0      	b.n	8004aa8 <_svfiprintf_r+0x1d0>
 8004906:	2340      	movs	r3, #64	; 0x40
 8004908:	616b      	str	r3, [r5, #20]
 800490a:	2300      	movs	r3, #0
 800490c:	9309      	str	r3, [sp, #36]	; 0x24
 800490e:	2320      	movs	r3, #32
 8004910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004914:	f8cd 800c 	str.w	r8, [sp, #12]
 8004918:	2330      	movs	r3, #48	; 0x30
 800491a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ac0 <_svfiprintf_r+0x1e8>
 800491e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004922:	f04f 0901 	mov.w	r9, #1
 8004926:	4623      	mov	r3, r4
 8004928:	469a      	mov	sl, r3
 800492a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800492e:	b10a      	cbz	r2, 8004934 <_svfiprintf_r+0x5c>
 8004930:	2a25      	cmp	r2, #37	; 0x25
 8004932:	d1f9      	bne.n	8004928 <_svfiprintf_r+0x50>
 8004934:	ebba 0b04 	subs.w	fp, sl, r4
 8004938:	d00b      	beq.n	8004952 <_svfiprintf_r+0x7a>
 800493a:	465b      	mov	r3, fp
 800493c:	4622      	mov	r2, r4
 800493e:	4629      	mov	r1, r5
 8004940:	4638      	mov	r0, r7
 8004942:	f7ff ff6f 	bl	8004824 <__ssputs_r>
 8004946:	3001      	adds	r0, #1
 8004948:	f000 80a9 	beq.w	8004a9e <_svfiprintf_r+0x1c6>
 800494c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800494e:	445a      	add	r2, fp
 8004950:	9209      	str	r2, [sp, #36]	; 0x24
 8004952:	f89a 3000 	ldrb.w	r3, [sl]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80a1 	beq.w	8004a9e <_svfiprintf_r+0x1c6>
 800495c:	2300      	movs	r3, #0
 800495e:	f04f 32ff 	mov.w	r2, #4294967295
 8004962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004966:	f10a 0a01 	add.w	sl, sl, #1
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	9307      	str	r3, [sp, #28]
 800496e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004972:	931a      	str	r3, [sp, #104]	; 0x68
 8004974:	4654      	mov	r4, sl
 8004976:	2205      	movs	r2, #5
 8004978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497c:	4850      	ldr	r0, [pc, #320]	; (8004ac0 <_svfiprintf_r+0x1e8>)
 800497e:	f7fb fc67 	bl	8000250 <memchr>
 8004982:	9a04      	ldr	r2, [sp, #16]
 8004984:	b9d8      	cbnz	r0, 80049be <_svfiprintf_r+0xe6>
 8004986:	06d0      	lsls	r0, r2, #27
 8004988:	bf44      	itt	mi
 800498a:	2320      	movmi	r3, #32
 800498c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004990:	0711      	lsls	r1, r2, #28
 8004992:	bf44      	itt	mi
 8004994:	232b      	movmi	r3, #43	; 0x2b
 8004996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800499a:	f89a 3000 	ldrb.w	r3, [sl]
 800499e:	2b2a      	cmp	r3, #42	; 0x2a
 80049a0:	d015      	beq.n	80049ce <_svfiprintf_r+0xf6>
 80049a2:	9a07      	ldr	r2, [sp, #28]
 80049a4:	4654      	mov	r4, sl
 80049a6:	2000      	movs	r0, #0
 80049a8:	f04f 0c0a 	mov.w	ip, #10
 80049ac:	4621      	mov	r1, r4
 80049ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049b2:	3b30      	subs	r3, #48	; 0x30
 80049b4:	2b09      	cmp	r3, #9
 80049b6:	d94d      	bls.n	8004a54 <_svfiprintf_r+0x17c>
 80049b8:	b1b0      	cbz	r0, 80049e8 <_svfiprintf_r+0x110>
 80049ba:	9207      	str	r2, [sp, #28]
 80049bc:	e014      	b.n	80049e8 <_svfiprintf_r+0x110>
 80049be:	eba0 0308 	sub.w	r3, r0, r8
 80049c2:	fa09 f303 	lsl.w	r3, r9, r3
 80049c6:	4313      	orrs	r3, r2
 80049c8:	9304      	str	r3, [sp, #16]
 80049ca:	46a2      	mov	sl, r4
 80049cc:	e7d2      	b.n	8004974 <_svfiprintf_r+0x9c>
 80049ce:	9b03      	ldr	r3, [sp, #12]
 80049d0:	1d19      	adds	r1, r3, #4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	9103      	str	r1, [sp, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfbb      	ittet	lt
 80049da:	425b      	neglt	r3, r3
 80049dc:	f042 0202 	orrlt.w	r2, r2, #2
 80049e0:	9307      	strge	r3, [sp, #28]
 80049e2:	9307      	strlt	r3, [sp, #28]
 80049e4:	bfb8      	it	lt
 80049e6:	9204      	strlt	r2, [sp, #16]
 80049e8:	7823      	ldrb	r3, [r4, #0]
 80049ea:	2b2e      	cmp	r3, #46	; 0x2e
 80049ec:	d10c      	bne.n	8004a08 <_svfiprintf_r+0x130>
 80049ee:	7863      	ldrb	r3, [r4, #1]
 80049f0:	2b2a      	cmp	r3, #42	; 0x2a
 80049f2:	d134      	bne.n	8004a5e <_svfiprintf_r+0x186>
 80049f4:	9b03      	ldr	r3, [sp, #12]
 80049f6:	1d1a      	adds	r2, r3, #4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	9203      	str	r2, [sp, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bfb8      	it	lt
 8004a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a04:	3402      	adds	r4, #2
 8004a06:	9305      	str	r3, [sp, #20]
 8004a08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ad0 <_svfiprintf_r+0x1f8>
 8004a0c:	7821      	ldrb	r1, [r4, #0]
 8004a0e:	2203      	movs	r2, #3
 8004a10:	4650      	mov	r0, sl
 8004a12:	f7fb fc1d 	bl	8000250 <memchr>
 8004a16:	b138      	cbz	r0, 8004a28 <_svfiprintf_r+0x150>
 8004a18:	9b04      	ldr	r3, [sp, #16]
 8004a1a:	eba0 000a 	sub.w	r0, r0, sl
 8004a1e:	2240      	movs	r2, #64	; 0x40
 8004a20:	4082      	lsls	r2, r0
 8004a22:	4313      	orrs	r3, r2
 8004a24:	3401      	adds	r4, #1
 8004a26:	9304      	str	r3, [sp, #16]
 8004a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a2c:	4825      	ldr	r0, [pc, #148]	; (8004ac4 <_svfiprintf_r+0x1ec>)
 8004a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a32:	2206      	movs	r2, #6
 8004a34:	f7fb fc0c 	bl	8000250 <memchr>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d038      	beq.n	8004aae <_svfiprintf_r+0x1d6>
 8004a3c:	4b22      	ldr	r3, [pc, #136]	; (8004ac8 <_svfiprintf_r+0x1f0>)
 8004a3e:	bb1b      	cbnz	r3, 8004a88 <_svfiprintf_r+0x1b0>
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	3307      	adds	r3, #7
 8004a44:	f023 0307 	bic.w	r3, r3, #7
 8004a48:	3308      	adds	r3, #8
 8004a4a:	9303      	str	r3, [sp, #12]
 8004a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a4e:	4433      	add	r3, r6
 8004a50:	9309      	str	r3, [sp, #36]	; 0x24
 8004a52:	e768      	b.n	8004926 <_svfiprintf_r+0x4e>
 8004a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a58:	460c      	mov	r4, r1
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	e7a6      	b.n	80049ac <_svfiprintf_r+0xd4>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	3401      	adds	r4, #1
 8004a62:	9305      	str	r3, [sp, #20]
 8004a64:	4619      	mov	r1, r3
 8004a66:	f04f 0c0a 	mov.w	ip, #10
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a70:	3a30      	subs	r2, #48	; 0x30
 8004a72:	2a09      	cmp	r2, #9
 8004a74:	d903      	bls.n	8004a7e <_svfiprintf_r+0x1a6>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0c6      	beq.n	8004a08 <_svfiprintf_r+0x130>
 8004a7a:	9105      	str	r1, [sp, #20]
 8004a7c:	e7c4      	b.n	8004a08 <_svfiprintf_r+0x130>
 8004a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a82:	4604      	mov	r4, r0
 8004a84:	2301      	movs	r3, #1
 8004a86:	e7f0      	b.n	8004a6a <_svfiprintf_r+0x192>
 8004a88:	ab03      	add	r3, sp, #12
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	462a      	mov	r2, r5
 8004a8e:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <_svfiprintf_r+0x1f4>)
 8004a90:	a904      	add	r1, sp, #16
 8004a92:	4638      	mov	r0, r7
 8004a94:	f3af 8000 	nop.w
 8004a98:	1c42      	adds	r2, r0, #1
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	d1d6      	bne.n	8004a4c <_svfiprintf_r+0x174>
 8004a9e:	89ab      	ldrh	r3, [r5, #12]
 8004aa0:	065b      	lsls	r3, r3, #25
 8004aa2:	f53f af2d 	bmi.w	8004900 <_svfiprintf_r+0x28>
 8004aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aa8:	b01d      	add	sp, #116	; 0x74
 8004aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aae:	ab03      	add	r3, sp, #12
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	462a      	mov	r2, r5
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <_svfiprintf_r+0x1f4>)
 8004ab6:	a904      	add	r1, sp, #16
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f000 f879 	bl	8004bb0 <_printf_i>
 8004abe:	e7eb      	b.n	8004a98 <_svfiprintf_r+0x1c0>
 8004ac0:	08004f0c 	.word	0x08004f0c
 8004ac4:	08004f16 	.word	0x08004f16
 8004ac8:	00000000 	.word	0x00000000
 8004acc:	08004825 	.word	0x08004825
 8004ad0:	08004f12 	.word	0x08004f12

08004ad4 <_printf_common>:
 8004ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ad8:	4616      	mov	r6, r2
 8004ada:	4699      	mov	r9, r3
 8004adc:	688a      	ldr	r2, [r1, #8]
 8004ade:	690b      	ldr	r3, [r1, #16]
 8004ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bfb8      	it	lt
 8004ae8:	4613      	movlt	r3, r2
 8004aea:	6033      	str	r3, [r6, #0]
 8004aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004af0:	4607      	mov	r7, r0
 8004af2:	460c      	mov	r4, r1
 8004af4:	b10a      	cbz	r2, 8004afa <_printf_common+0x26>
 8004af6:	3301      	adds	r3, #1
 8004af8:	6033      	str	r3, [r6, #0]
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	0699      	lsls	r1, r3, #26
 8004afe:	bf42      	ittt	mi
 8004b00:	6833      	ldrmi	r3, [r6, #0]
 8004b02:	3302      	addmi	r3, #2
 8004b04:	6033      	strmi	r3, [r6, #0]
 8004b06:	6825      	ldr	r5, [r4, #0]
 8004b08:	f015 0506 	ands.w	r5, r5, #6
 8004b0c:	d106      	bne.n	8004b1c <_printf_common+0x48>
 8004b0e:	f104 0a19 	add.w	sl, r4, #25
 8004b12:	68e3      	ldr	r3, [r4, #12]
 8004b14:	6832      	ldr	r2, [r6, #0]
 8004b16:	1a9b      	subs	r3, r3, r2
 8004b18:	42ab      	cmp	r3, r5
 8004b1a:	dc26      	bgt.n	8004b6a <_printf_common+0x96>
 8004b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b20:	1e13      	subs	r3, r2, #0
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	bf18      	it	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	0692      	lsls	r2, r2, #26
 8004b2a:	d42b      	bmi.n	8004b84 <_printf_common+0xb0>
 8004b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d01e      	beq.n	8004b78 <_printf_common+0xa4>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	6922      	ldr	r2, [r4, #16]
 8004b3e:	f003 0306 	and.w	r3, r3, #6
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	bf02      	ittt	eq
 8004b46:	68e5      	ldreq	r5, [r4, #12]
 8004b48:	6833      	ldreq	r3, [r6, #0]
 8004b4a:	1aed      	subeq	r5, r5, r3
 8004b4c:	68a3      	ldr	r3, [r4, #8]
 8004b4e:	bf0c      	ite	eq
 8004b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b54:	2500      	movne	r5, #0
 8004b56:	4293      	cmp	r3, r2
 8004b58:	bfc4      	itt	gt
 8004b5a:	1a9b      	subgt	r3, r3, r2
 8004b5c:	18ed      	addgt	r5, r5, r3
 8004b5e:	2600      	movs	r6, #0
 8004b60:	341a      	adds	r4, #26
 8004b62:	42b5      	cmp	r5, r6
 8004b64:	d11a      	bne.n	8004b9c <_printf_common+0xc8>
 8004b66:	2000      	movs	r0, #0
 8004b68:	e008      	b.n	8004b7c <_printf_common+0xa8>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4652      	mov	r2, sl
 8004b6e:	4649      	mov	r1, r9
 8004b70:	4638      	mov	r0, r7
 8004b72:	47c0      	blx	r8
 8004b74:	3001      	adds	r0, #1
 8004b76:	d103      	bne.n	8004b80 <_printf_common+0xac>
 8004b78:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b80:	3501      	adds	r5, #1
 8004b82:	e7c6      	b.n	8004b12 <_printf_common+0x3e>
 8004b84:	18e1      	adds	r1, r4, r3
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	2030      	movs	r0, #48	; 0x30
 8004b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b8e:	4422      	add	r2, r4
 8004b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b98:	3302      	adds	r3, #2
 8004b9a:	e7c7      	b.n	8004b2c <_printf_common+0x58>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	47c0      	blx	r8
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d0e6      	beq.n	8004b78 <_printf_common+0xa4>
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7d9      	b.n	8004b62 <_printf_common+0x8e>
	...

08004bb0 <_printf_i>:
 8004bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb4:	7e0f      	ldrb	r7, [r1, #24]
 8004bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bb8:	2f78      	cmp	r7, #120	; 0x78
 8004bba:	4691      	mov	r9, r2
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	469a      	mov	sl, r3
 8004bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bc6:	d807      	bhi.n	8004bd8 <_printf_i+0x28>
 8004bc8:	2f62      	cmp	r7, #98	; 0x62
 8004bca:	d80a      	bhi.n	8004be2 <_printf_i+0x32>
 8004bcc:	2f00      	cmp	r7, #0
 8004bce:	f000 80d4 	beq.w	8004d7a <_printf_i+0x1ca>
 8004bd2:	2f58      	cmp	r7, #88	; 0x58
 8004bd4:	f000 80c0 	beq.w	8004d58 <_printf_i+0x1a8>
 8004bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004be0:	e03a      	b.n	8004c58 <_printf_i+0xa8>
 8004be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004be6:	2b15      	cmp	r3, #21
 8004be8:	d8f6      	bhi.n	8004bd8 <_printf_i+0x28>
 8004bea:	a101      	add	r1, pc, #4	; (adr r1, 8004bf0 <_printf_i+0x40>)
 8004bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bf0:	08004c49 	.word	0x08004c49
 8004bf4:	08004c5d 	.word	0x08004c5d
 8004bf8:	08004bd9 	.word	0x08004bd9
 8004bfc:	08004bd9 	.word	0x08004bd9
 8004c00:	08004bd9 	.word	0x08004bd9
 8004c04:	08004bd9 	.word	0x08004bd9
 8004c08:	08004c5d 	.word	0x08004c5d
 8004c0c:	08004bd9 	.word	0x08004bd9
 8004c10:	08004bd9 	.word	0x08004bd9
 8004c14:	08004bd9 	.word	0x08004bd9
 8004c18:	08004bd9 	.word	0x08004bd9
 8004c1c:	08004d61 	.word	0x08004d61
 8004c20:	08004c89 	.word	0x08004c89
 8004c24:	08004d1b 	.word	0x08004d1b
 8004c28:	08004bd9 	.word	0x08004bd9
 8004c2c:	08004bd9 	.word	0x08004bd9
 8004c30:	08004d83 	.word	0x08004d83
 8004c34:	08004bd9 	.word	0x08004bd9
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004bd9 	.word	0x08004bd9
 8004c40:	08004bd9 	.word	0x08004bd9
 8004c44:	08004d23 	.word	0x08004d23
 8004c48:	682b      	ldr	r3, [r5, #0]
 8004c4a:	1d1a      	adds	r2, r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	602a      	str	r2, [r5, #0]
 8004c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e09f      	b.n	8004d9c <_printf_i+0x1ec>
 8004c5c:	6820      	ldr	r0, [r4, #0]
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	0607      	lsls	r7, r0, #24
 8004c62:	f103 0104 	add.w	r1, r3, #4
 8004c66:	6029      	str	r1, [r5, #0]
 8004c68:	d501      	bpl.n	8004c6e <_printf_i+0xbe>
 8004c6a:	681e      	ldr	r6, [r3, #0]
 8004c6c:	e003      	b.n	8004c76 <_printf_i+0xc6>
 8004c6e:	0646      	lsls	r6, r0, #25
 8004c70:	d5fb      	bpl.n	8004c6a <_printf_i+0xba>
 8004c72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c76:	2e00      	cmp	r6, #0
 8004c78:	da03      	bge.n	8004c82 <_printf_i+0xd2>
 8004c7a:	232d      	movs	r3, #45	; 0x2d
 8004c7c:	4276      	negs	r6, r6
 8004c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c82:	485a      	ldr	r0, [pc, #360]	; (8004dec <_printf_i+0x23c>)
 8004c84:	230a      	movs	r3, #10
 8004c86:	e012      	b.n	8004cae <_printf_i+0xfe>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	6820      	ldr	r0, [r4, #0]
 8004c8c:	1d19      	adds	r1, r3, #4
 8004c8e:	6029      	str	r1, [r5, #0]
 8004c90:	0605      	lsls	r5, r0, #24
 8004c92:	d501      	bpl.n	8004c98 <_printf_i+0xe8>
 8004c94:	681e      	ldr	r6, [r3, #0]
 8004c96:	e002      	b.n	8004c9e <_printf_i+0xee>
 8004c98:	0641      	lsls	r1, r0, #25
 8004c9a:	d5fb      	bpl.n	8004c94 <_printf_i+0xe4>
 8004c9c:	881e      	ldrh	r6, [r3, #0]
 8004c9e:	4853      	ldr	r0, [pc, #332]	; (8004dec <_printf_i+0x23c>)
 8004ca0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2308      	moveq	r3, #8
 8004ca6:	230a      	movne	r3, #10
 8004ca8:	2100      	movs	r1, #0
 8004caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cae:	6865      	ldr	r5, [r4, #4]
 8004cb0:	60a5      	str	r5, [r4, #8]
 8004cb2:	2d00      	cmp	r5, #0
 8004cb4:	bfa2      	ittt	ge
 8004cb6:	6821      	ldrge	r1, [r4, #0]
 8004cb8:	f021 0104 	bicge.w	r1, r1, #4
 8004cbc:	6021      	strge	r1, [r4, #0]
 8004cbe:	b90e      	cbnz	r6, 8004cc4 <_printf_i+0x114>
 8004cc0:	2d00      	cmp	r5, #0
 8004cc2:	d04b      	beq.n	8004d5c <_printf_i+0x1ac>
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cca:	fb03 6711 	mls	r7, r3, r1, r6
 8004cce:	5dc7      	ldrb	r7, [r0, r7]
 8004cd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cd4:	4637      	mov	r7, r6
 8004cd6:	42bb      	cmp	r3, r7
 8004cd8:	460e      	mov	r6, r1
 8004cda:	d9f4      	bls.n	8004cc6 <_printf_i+0x116>
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d10b      	bne.n	8004cf8 <_printf_i+0x148>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	07de      	lsls	r6, r3, #31
 8004ce4:	d508      	bpl.n	8004cf8 <_printf_i+0x148>
 8004ce6:	6923      	ldr	r3, [r4, #16]
 8004ce8:	6861      	ldr	r1, [r4, #4]
 8004cea:	4299      	cmp	r1, r3
 8004cec:	bfde      	ittt	le
 8004cee:	2330      	movle	r3, #48	; 0x30
 8004cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cf8:	1b52      	subs	r2, r2, r5
 8004cfa:	6122      	str	r2, [r4, #16]
 8004cfc:	f8cd a000 	str.w	sl, [sp]
 8004d00:	464b      	mov	r3, r9
 8004d02:	aa03      	add	r2, sp, #12
 8004d04:	4621      	mov	r1, r4
 8004d06:	4640      	mov	r0, r8
 8004d08:	f7ff fee4 	bl	8004ad4 <_printf_common>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d14a      	bne.n	8004da6 <_printf_i+0x1f6>
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295
 8004d14:	b004      	add	sp, #16
 8004d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	f043 0320 	orr.w	r3, r3, #32
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	4833      	ldr	r0, [pc, #204]	; (8004df0 <_printf_i+0x240>)
 8004d24:	2778      	movs	r7, #120	; 0x78
 8004d26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	6829      	ldr	r1, [r5, #0]
 8004d2e:	061f      	lsls	r7, r3, #24
 8004d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d34:	d402      	bmi.n	8004d3c <_printf_i+0x18c>
 8004d36:	065f      	lsls	r7, r3, #25
 8004d38:	bf48      	it	mi
 8004d3a:	b2b6      	uxthmi	r6, r6
 8004d3c:	07df      	lsls	r7, r3, #31
 8004d3e:	bf48      	it	mi
 8004d40:	f043 0320 	orrmi.w	r3, r3, #32
 8004d44:	6029      	str	r1, [r5, #0]
 8004d46:	bf48      	it	mi
 8004d48:	6023      	strmi	r3, [r4, #0]
 8004d4a:	b91e      	cbnz	r6, 8004d54 <_printf_i+0x1a4>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	f023 0320 	bic.w	r3, r3, #32
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	2310      	movs	r3, #16
 8004d56:	e7a7      	b.n	8004ca8 <_printf_i+0xf8>
 8004d58:	4824      	ldr	r0, [pc, #144]	; (8004dec <_printf_i+0x23c>)
 8004d5a:	e7e4      	b.n	8004d26 <_printf_i+0x176>
 8004d5c:	4615      	mov	r5, r2
 8004d5e:	e7bd      	b.n	8004cdc <_printf_i+0x12c>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	6826      	ldr	r6, [r4, #0]
 8004d64:	6961      	ldr	r1, [r4, #20]
 8004d66:	1d18      	adds	r0, r3, #4
 8004d68:	6028      	str	r0, [r5, #0]
 8004d6a:	0635      	lsls	r5, r6, #24
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	d501      	bpl.n	8004d74 <_printf_i+0x1c4>
 8004d70:	6019      	str	r1, [r3, #0]
 8004d72:	e002      	b.n	8004d7a <_printf_i+0x1ca>
 8004d74:	0670      	lsls	r0, r6, #25
 8004d76:	d5fb      	bpl.n	8004d70 <_printf_i+0x1c0>
 8004d78:	8019      	strh	r1, [r3, #0]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6123      	str	r3, [r4, #16]
 8004d7e:	4615      	mov	r5, r2
 8004d80:	e7bc      	b.n	8004cfc <_printf_i+0x14c>
 8004d82:	682b      	ldr	r3, [r5, #0]
 8004d84:	1d1a      	adds	r2, r3, #4
 8004d86:	602a      	str	r2, [r5, #0]
 8004d88:	681d      	ldr	r5, [r3, #0]
 8004d8a:	6862      	ldr	r2, [r4, #4]
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f7fb fa5e 	bl	8000250 <memchr>
 8004d94:	b108      	cbz	r0, 8004d9a <_printf_i+0x1ea>
 8004d96:	1b40      	subs	r0, r0, r5
 8004d98:	6060      	str	r0, [r4, #4]
 8004d9a:	6863      	ldr	r3, [r4, #4]
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da4:	e7aa      	b.n	8004cfc <_printf_i+0x14c>
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	462a      	mov	r2, r5
 8004daa:	4649      	mov	r1, r9
 8004dac:	4640      	mov	r0, r8
 8004dae:	47d0      	blx	sl
 8004db0:	3001      	adds	r0, #1
 8004db2:	d0ad      	beq.n	8004d10 <_printf_i+0x160>
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	079b      	lsls	r3, r3, #30
 8004db8:	d413      	bmi.n	8004de2 <_printf_i+0x232>
 8004dba:	68e0      	ldr	r0, [r4, #12]
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	4298      	cmp	r0, r3
 8004dc0:	bfb8      	it	lt
 8004dc2:	4618      	movlt	r0, r3
 8004dc4:	e7a6      	b.n	8004d14 <_printf_i+0x164>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4632      	mov	r2, r6
 8004dca:	4649      	mov	r1, r9
 8004dcc:	4640      	mov	r0, r8
 8004dce:	47d0      	blx	sl
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	d09d      	beq.n	8004d10 <_printf_i+0x160>
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	68e3      	ldr	r3, [r4, #12]
 8004dd8:	9903      	ldr	r1, [sp, #12]
 8004dda:	1a5b      	subs	r3, r3, r1
 8004ddc:	42ab      	cmp	r3, r5
 8004dde:	dcf2      	bgt.n	8004dc6 <_printf_i+0x216>
 8004de0:	e7eb      	b.n	8004dba <_printf_i+0x20a>
 8004de2:	2500      	movs	r5, #0
 8004de4:	f104 0619 	add.w	r6, r4, #25
 8004de8:	e7f5      	b.n	8004dd6 <_printf_i+0x226>
 8004dea:	bf00      	nop
 8004dec:	08004f1d 	.word	0x08004f1d
 8004df0:	08004f2e 	.word	0x08004f2e

08004df4 <memmove>:
 8004df4:	4288      	cmp	r0, r1
 8004df6:	b510      	push	{r4, lr}
 8004df8:	eb01 0402 	add.w	r4, r1, r2
 8004dfc:	d902      	bls.n	8004e04 <memmove+0x10>
 8004dfe:	4284      	cmp	r4, r0
 8004e00:	4623      	mov	r3, r4
 8004e02:	d807      	bhi.n	8004e14 <memmove+0x20>
 8004e04:	1e43      	subs	r3, r0, #1
 8004e06:	42a1      	cmp	r1, r4
 8004e08:	d008      	beq.n	8004e1c <memmove+0x28>
 8004e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e12:	e7f8      	b.n	8004e06 <memmove+0x12>
 8004e14:	4402      	add	r2, r0
 8004e16:	4601      	mov	r1, r0
 8004e18:	428a      	cmp	r2, r1
 8004e1a:	d100      	bne.n	8004e1e <memmove+0x2a>
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e26:	e7f7      	b.n	8004e18 <memmove+0x24>

08004e28 <_sbrk_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4d06      	ldr	r5, [pc, #24]	; (8004e44 <_sbrk_r+0x1c>)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	f7fb ff52 	bl	8000cdc <_sbrk>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_sbrk_r+0x1a>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_sbrk_r+0x1a>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	20000334 	.word	0x20000334

08004e48 <memcpy>:
 8004e48:	440a      	add	r2, r1
 8004e4a:	4291      	cmp	r1, r2
 8004e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e50:	d100      	bne.n	8004e54 <memcpy+0xc>
 8004e52:	4770      	bx	lr
 8004e54:	b510      	push	{r4, lr}
 8004e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e5e:	4291      	cmp	r1, r2
 8004e60:	d1f9      	bne.n	8004e56 <memcpy+0xe>
 8004e62:	bd10      	pop	{r4, pc}

08004e64 <_realloc_r>:
 8004e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e68:	4680      	mov	r8, r0
 8004e6a:	4614      	mov	r4, r2
 8004e6c:	460e      	mov	r6, r1
 8004e6e:	b921      	cbnz	r1, 8004e7a <_realloc_r+0x16>
 8004e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e74:	4611      	mov	r1, r2
 8004e76:	f7ff bc49 	b.w	800470c <_malloc_r>
 8004e7a:	b92a      	cbnz	r2, 8004e88 <_realloc_r+0x24>
 8004e7c:	f7ff fbda 	bl	8004634 <_free_r>
 8004e80:	4625      	mov	r5, r4
 8004e82:	4628      	mov	r0, r5
 8004e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e88:	f000 f81b 	bl	8004ec2 <_malloc_usable_size_r>
 8004e8c:	4284      	cmp	r4, r0
 8004e8e:	4607      	mov	r7, r0
 8004e90:	d802      	bhi.n	8004e98 <_realloc_r+0x34>
 8004e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e96:	d812      	bhi.n	8004ebe <_realloc_r+0x5a>
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	f7ff fc36 	bl	800470c <_malloc_r>
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d0ed      	beq.n	8004e82 <_realloc_r+0x1e>
 8004ea6:	42bc      	cmp	r4, r7
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	4631      	mov	r1, r6
 8004eac:	bf28      	it	cs
 8004eae:	463a      	movcs	r2, r7
 8004eb0:	f7ff ffca 	bl	8004e48 <memcpy>
 8004eb4:	4631      	mov	r1, r6
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	f7ff fbbc 	bl	8004634 <_free_r>
 8004ebc:	e7e1      	b.n	8004e82 <_realloc_r+0x1e>
 8004ebe:	4635      	mov	r5, r6
 8004ec0:	e7df      	b.n	8004e82 <_realloc_r+0x1e>

08004ec2 <_malloc_usable_size_r>:
 8004ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ec6:	1f18      	subs	r0, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bfbc      	itt	lt
 8004ecc:	580b      	ldrlt	r3, [r1, r0]
 8004ece:	18c0      	addlt	r0, r0, r3
 8004ed0:	4770      	bx	lr
	...

08004ed4 <_init>:
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed6:	bf00      	nop
 8004ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eda:	bc08      	pop	{r3}
 8004edc:	469e      	mov	lr, r3
 8004ede:	4770      	bx	lr

08004ee0 <_fini>:
 8004ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee2:	bf00      	nop
 8004ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee6:	bc08      	pop	{r3}
 8004ee8:	469e      	mov	lr, r3
 8004eea:	4770      	bx	lr
